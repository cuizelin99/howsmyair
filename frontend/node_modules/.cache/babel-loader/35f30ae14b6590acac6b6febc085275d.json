{"ast":null,"code":"import _slicedToArray from \"/Users/davidbomm/SWE/cs373-airpollution/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/davidbomm/SWE/cs373-airpollution/frontend/src/visualizations/visual2.js\";\n\n/*\nInpired by: https://gitlab.com/siweimao/connect-with-nature/tree/master/frontend/Components\n*/\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport uStates from './uStates';\nimport './StatesMap.css';\nimport axios from \"axios\";\n\nclass Visual2 extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (event, value) => {\n      this.setState({\n        value\n      });\n    };\n\n    this.state = {\n      value: 0,\n      illnessStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      pollutantStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      loaded: false\n    };\n  }\n\n  componentDidMount() {\n    axios.all([axios.get(\"https://api.howsmyair.me/location?results_per_page=1000\")]).then(axios.spread(locationData => {\n      locationData.data.objects.forEach(location => {\n        location.related_illnesses.forEach(illness => {\n          this.state.illnessStateDict[location.state_id] = this.state.illnessStateDict[location.state_id] + 1;\n        });\n        location.related_pollutants.forEach(pollutant => {\n          this.state.pollutantStateDict[location.state_id] = this.state.pollutantStateDict[location.state_id] + 1;\n        });\n      });\n      this.setState({\n        loaded: true\n      });\n    }));\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          illnessStateDict = _this$state.illnessStateDict,\n          pollutantStateDict = _this$state.pollutantStateDict,\n          loaded = _this$state.loaded;\n    const _this$state2 = this.state,\n          billStateDict = _this$state2.billStateDict,\n          efpollutantStateDict = _this$state2.efpollutantStateDict,\n          progStateDict = _this$state2.progStateDict;\n    var data = [];\n\n    if (illnessStateDict != null) {\n      let temp = this.state.illnessStateDict;\n\n      for (const _ref of Object.entries(temp)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        const key = _ref2[0];\n        const value = _ref2[1];\n        var tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        data.push(tempDict);\n      }\n    }\n\n    var dataEF = [];\n\n    if (efpollutantStateDict != null) {\n      let temp = efpollutantStateDict;\n\n      for (const _ref3 of Object.entries(temp)) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        const key = _ref4[0];\n        const value = _ref4[1];\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        dataEF.push(tempDict);\n      }\n    }\n\n    var pollData = [];\n\n    if (pollutantStateDict != null) {\n      let temp = this.state.pollutantStateDict;\n\n      for (const _ref5 of Object.entries(temp)) {\n        var _ref6 = _slicedToArray(_ref5, 2);\n\n        const key = _ref6[0];\n        const value = _ref6[1];\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        pollData.push(tempDict);\n      }\n    }\n\n    if (loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(StateMap, {\n        illnessData: illnessStateDict,\n        pollutantData: pollutantStateDict,\n        first: \"Illnesses:\",\n        second: \"Pollutants:\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }));\n    }\n\n    if (!loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Loading\");\n    }\n  }\n\n}\n\nexport default Visual2;\n\nclass StateMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: null,\n      isLoaded: false,\n      illnessStateDict: props.illnessData,\n      pollutantStateDict: props.pollutantData,\n      first: props.first,\n      second: props.second\n    };\n    this.drawChart = this.drawChart.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoaded: true\n    });\n  }\n\n  drawChart() {\n    const _this$state3 = this.state,\n          illnessStateDict = _this$state3.illnessStateDict,\n          pollutantStateDict = _this$state3.pollutantStateDict,\n          first = _this$state3.first,\n          second = _this$state3.second;\n\n    function tooltipHtml(n, d) {\n      /* function to create html content string in tooltip div. */\n      return \"<h4>\" + n + \"</h4><table>\" + \"<tr><td>\" + first + \"</td><td>\" + d.illnesses + \"</td></tr>\" + \"<tr><td>\" + second + \"</td><td>\" + d.pollutants + \"</td></tr>\" + \"</table>\";\n    }\n\n    var sampleData = {};\n    [\"HI\", \"AK\", \"FL\", \"SC\", \"GA\", \"AL\", \"NC\", \"TN\", \"RI\", \"CT\", \"MA\", \"ME\", \"NH\", \"VT\", \"NY\", \"NJ\", \"PA\", \"DE\", \"MD\", \"WV\", \"KY\", \"OH\", \"MI\", \"WY\", \"MT\", \"ID\", \"WA\", \"DC\", \"TX\", \"CA\", \"AZ\", \"NV\", \"UT\", \"CO\", \"NM\", \"OR\", \"ND\", \"SD\", \"NE\", \"IA\", \"MS\", \"IN\", \"IL\", \"MN\", \"WI\", \"MO\", \"AR\", \"OK\", \"KS\", \"LA\", \"VA\"].forEach(function (d) {\n      var ill = illnessStateDict[d];\n      var poll = pollutantStateDict[d];\n      sampleData[d] = {\n        illnesses: ill,\n        pollutants: poll,\n        color: d3.interpolate(\"#e4f1ff\", \"#003e79\")((ill + poll) / 5)\n      };\n    });\n    /* draw states on id #statesvg */\n\n    uStates.draw(\"#statesvg\", sampleData, tooltipHtml);\n    d3.select(window.frameElement).style(\"height\", \"600px\");\n  }\n\n  render() {\n    if (this.state.isLoaded) {\n      this.drawChart();\n    }\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"tooltip\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(\"svg\", {\n      width: \"960\",\n      height: \"600\",\n      id: \"statesvg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/davidbomm/SWE/cs373-airpollution/frontend/src/visualizations/visual2.js"],"names":["React","Component","d3","uStates","axios","Visual2","constructor","props","handleChange","event","value","setState","state","illnessStateDict","AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","VI","WA","WV","WI","WY","pollutantStateDict","loaded","componentDidMount","all","get","then","spread","locationData","data","objects","forEach","location","related_illnesses","illness","state_id","related_pollutants","pollutant","render","classes","billStateDict","efpollutantStateDict","progStateDict","temp","Object","entries","key","tempDict","push","dataEF","pollData","StateMap","status","isLoaded","illnessData","pollutantData","first","second","drawChart","bind","tooltipHtml","n","d","illnesses","pollutants","sampleData","ill","poll","color","interpolate","draw","select","window","frameElement","style"],"mappings":"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","sourcesContent":["/*\nInpired by: https://gitlab.com/siweimao/connect-with-nature/tree/master/frontend/Components\n*/\n\nimport React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport uStates from './uStates';\nimport './StatesMap.css';\n\nimport axios from \"axios\";\n\nclass Visual2 extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n      illnessStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      pollutantStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      loaded: false\n    };\n  }\n\n\n    componentDidMount() {\n      axios\n        .all([\n          axios.get(\"https://api.howsmyair.me/location?results_per_page=1000\"),\n        ])\n        .then(\n          axios.spread((locationData) => {\n             locationData.data.objects.forEach(location => {\n                location.related_illnesses.forEach(illness => {\n                   this.state.illnessStateDict[location.state_id] = this.state.illnessStateDict[location.state_id] + 1;\n                });\n                location.related_pollutants.forEach(pollutant => {\n                   this.state.pollutantStateDict[location.state_id] = this.state.pollutantStateDict[location.state_id] + 1;\n                });\n              });\n            this.setState({\n              loaded: true\n            });\n          })\n        );\n    }\n\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { illnessStateDict, pollutantStateDict, loaded } = this.state;\n\n    const { billStateDict, efpollutantStateDict, progStateDict } = this.state;\n    var data = [];\n    if (illnessStateDict != null) {\n      let temp = this.state.illnessStateDict;\n      for (const [key, value] of Object.entries(temp)) {\n        var tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        data.push(tempDict);\n      }\n    }\n    var dataEF = [];\n    if (efpollutantStateDict != null) {\n      let temp = efpollutantStateDict;\n      for (const [key, value] of Object.entries(temp)) {\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        dataEF.push(tempDict);\n      }\n    }\n    var pollData = [];\n    if (pollutantStateDict != null) {\n      let temp = this.state.pollutantStateDict;\n      for (const [key, value] of Object.entries(temp)) {\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        pollData.push(tempDict);\n      }\n    }\n    if (loaded) {\n      return (\n        <div>\n          <StateMap\n            illnessData={illnessStateDict}\n            pollutantData={pollutantStateDict}\n            first=\"Illnesses:\"\n            second=\"Pollutants:\"\n          />\n        </div>\n      );\n    }\n    if (!loaded) {\n      return (\n        <div>\n         Loading\n        </div>\n      );\n    }\n  }\n}\n\nexport default Visual2;\n\nclass StateMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: null,\n      isLoaded: false,\n      illnessStateDict: props.illnessData,\n      pollutantStateDict: props.pollutantData,\n      first: props.first,\n      second: props.second,\n    };\n    this.drawChart = this.drawChart.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n        isLoaded: true,\n      });\n  }\n\n  drawChart() {\n    const { illnessStateDict, pollutantStateDict, first, second } = this.state;\n    function tooltipHtml(n, d){ /* function to create html content string in tooltip div. */\n      return \"<h4>\"+n+\"</h4><table>\"+\n        \"<tr><td>\" + (first) + \"</td><td>\"+(d.illnesses)+\"</td></tr>\"+\n        \"<tr><td>\" + (second) + \"</td><td>\"+(d.pollutants)+\"</td></tr>\"+\n        \"</table>\";\n    }\n    var sampleData ={};\n    [\"HI\", \"AK\", \"FL\", \"SC\", \"GA\", \"AL\", \"NC\", \"TN\", \"RI\", \"CT\", \"MA\",\n    \"ME\", \"NH\", \"VT\", \"NY\", \"NJ\", \"PA\", \"DE\", \"MD\", \"WV\", \"KY\", \"OH\",\n    \"MI\", \"WY\", \"MT\", \"ID\", \"WA\", \"DC\", \"TX\", \"CA\", \"AZ\", \"NV\", \"UT\",\n    \"CO\", \"NM\", \"OR\", \"ND\", \"SD\", \"NE\", \"IA\", \"MS\", \"IN\", \"IL\", \"MN\",\n    \"WI\", \"MO\", \"AR\", \"OK\", \"KS\", \"LA\", \"VA\"]\n      .forEach(function(d){\n        var ill = illnessStateDict[d];\n        var poll = pollutantStateDict[d];\n\n        sampleData[d]={illnesses: ill, pollutants: poll,\n                       color:d3.interpolate(\"#e4f1ff\", \"#003e79\")((ill + poll) / 5)};\n      });\n\n    /* draw states on id #statesvg */\n    uStates.draw(\"#statesvg\", sampleData, tooltipHtml);\n\n    d3.select(window.frameElement).style(\"height\", \"600px\");\n  }\n\n  render() {\n    if(this.state.isLoaded){\n      this.drawChart();\n    }\n    return (\n      <div className=\"container\">\n        <div id=\"tooltip\"></div>\n        <svg width=\"960\" height=\"600\" id=\"statesvg\"></svg>\n      </div>\n    );\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}