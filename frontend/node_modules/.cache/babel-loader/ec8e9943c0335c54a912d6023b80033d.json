{"ast":null,"code":"var _jsxFileName = \"/home/jasonsim/School/cs373-airpollution/frontend/src/pages/pollutants/Pollutants.js\";\nimport React, { Component } from 'react';\nimport { Jumbotron, Container, Card, Button, CardImg, CardTitle, CardText, CardHeader, CardDeck, CardColumns, CardSubtitle, CardBody, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { Col, Row, Pagination, DropdownButton, Dropdown } from 'react-bootstrap';\nimport { Pollutantcards } from './PollutantItems';\n\nconst fetch = require(\"node-fetch\");\n/*\nSources:\n\nPagination sources:\nhttps://github.com/react-bootstrap/pagination\nhttps://www.npmjs.com/package/react-ultimate-pagination\nhttps://codepen.io/joedazza/pen/BVXVej\n*/\n\n\nconst ENDPOINT = 'https://api.howsmyair.me/pollutants';\n\nconst buildOrder = (fieldname, direction) => {\n  return \"{%22field%22:%22\".concat(fieldname, \"%22,%22direction%22:%22\").concat(direction, \"%22}\");\n};\n\nconst buildFilter = (fieldname, operator, value) => {\n  return \"{%22name%22:%22\".concat(fieldname, \"%22,%22op%22:%22\").concat(operator, \"%22,%22val%22:%22\").concat(value, \"%22}\");\n};\n\nconst buildQuery = (model, page, filterObjs, orderObjs) => {\n  return \"https://api.howsmyair.me/\".concat(model, \"?page=\").concat(page, \"&q={%22filters%22:[\").concat(filterObjs, \"],%22order_by%22:[\").concat(orderObjs, \"]}\");\n};\n\nexport class Pollutants extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setPollutants = objects => {\n      this.setState({\n        pollutants: objects\n      });\n    };\n\n    this.state = {\n      pollutants: null\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isloaded: true\n    });\n  }\n\n  render() {\n    // really hacky but it works for calling back without infinite looping\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(PollutantsController, {\n      setObjects: this.setPollutants,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Pollutantcards, {\n      pollutants: this.state.pollutants,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })));\n  }\n\n}\nexport class PollutantsController extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      num_results: null,\n      objects: [],\n      page: null,\n      total_pages: null,\n      states: [],\n      time_zones: [],\n      inhalation_cancer_potency: \"None\",\n      inhalation_cancer_potency_source: \"None\",\n      inhalation_cancer_potency_units: \"None\",\n      inhalation_reference_concentration: \"None\",\n      inhalation_reference_concentration_source: \"None\",\n      inhalation_reference_concentration_units: \"None\",\n      national_ambient_air_quality_std: \"None\",\n      national_ambient_air_quality_std_source: \"None\",\n      national_ambient_air_quality_std_units: \"None\",\n      cancer_potency_sources: [],\n      cancer_potency_units: [],\n      reference_concentration_source: [],\n      reference_concentration_units: [],\n      ambient_air_quality_std_source: [],\n      ambient_air_quality_std_units: [],\n      sort_by: \"chemical_name\",\n      display_sort: \"Chemical Name\",\n      order: \"asc\",\n      display_order: \"Ascending\",\n      page: 1,\n      isloaded: false\n    };\n  }\n\n  componentDidMount() {\n    fetch(this.getQuery()).then(res => res.json()).then(data => {\n      this.setState({\n        data: data,\n        num_results: data.num_results,\n        objects: data.objects,\n        page: data.page,\n        total_pages: data.total_pages,\n        cancer_potency_sources: this.getUniques(data.objects, \"inhalation_cancer_potency_source\"),\n        cancer_potency_units: this.getUniques(data.objects, \"inhalation_cancer_potency_units\"),\n        reference_concentration_source: this.getUniques(data.objects, \"inhalation_reference_concentration_source\"),\n        reference_concentration_units: this.getUniques(data.objects, \"inhalation_reference_concentration_units\"),\n        ambient_air_quality_std_source: this.getUniques(data.objects, \"national_ambient_air_quality_std_source\"),\n        ambient_air_quality_std_units: this.getUniques(data.objects, \"national_ambient_air_quality_std_units\"),\n        isloaded: true\n      });\n\n      if (this.props.setObjects != null) {\n        this.props.setObjects(data.objects);\n      }\n    });\n  }\n\n  getUniques(objArray, key) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj[key]) === -1) {\n        uniqueVals.push(obj[key]);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getQuery() {\n    let filterObjs = buildFilter(\"chemical_name\", \"like\", \"%25\".concat(this.props.searchstring || '', \"%25\"));\n    let orderObjs = buildOrder(\"chemical_name\", \"asc\");\n\n    if (this.state.inhalation_cancer_potency_source != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_cancer_potency_source\", \"eq\", this.state.inhalation_cancer_potency_source);\n    }\n\n    if (this.state.inhalation_cancer_potency_units != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_cancer_potency_units\", \"eq\", this.state.inhalation_cancer_potency_units);\n    }\n\n    if (this.state.inhalation_reference_concentration_source != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_reference_concentration_source\", \"eq\", this.state.inhalation_reference_concentration_source);\n    }\n\n    if (this.state.inhalation_reference_concentration_units != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_reference_concentration_units\", \"eq\", this.state.inhalation_reference_concentration_units);\n    }\n\n    if (this.state.national_ambient_air_quality_std_source != \"None\") {\n      filterObjs += \",\" + buildFilter(\"national_ambient_air_quality_std_source\", \"eq\", this.state.national_ambient_air_quality_std_source);\n    }\n\n    if (this.state.national_ambient_air_quality_std_units != \"None\") {\n      filterObjs += \",\" + buildFilter(\"national_ambient_air_quality_std_units\", \"eq\", this.state.national_ambient_air_quality_std_units);\n    }\n\n    orderObjs = buildOrder(this.state.sort_by, this.state.order);\n    return buildQuery(\"pollutants\", this.state.page, filterObjs, orderObjs);\n  }\n\n  render() {\n    if (this.state.isloaded) {\n      let span = 4;\n      let page = this.state.page;\n      let l = page - span / 2;\n      let r = page + span / 2;\n      let range = [];\n      /*If there aren't enough pages to have dynamically changing page values*/\n\n      if (this.state.total_pages < span) {\n        range = [...Array(this.state.total_pages + 1 - 1).keys()].map(i => i + 1);\n      } else if (page + span > this.state.total_pages) {\n        /*At the right bound*/\n        range = [...Array(this.state.total_pages - (this.state.total_pages - span)).keys()].map(i => this.state.total_pages - span + i + 1);\n      } else if (page - span < 0) {\n        /*At the left bound*/\n        range = [...Array(span + 1 - 1).keys()].map(i => i + 1);\n      } else {\n        /*At somewhere in between*/\n        range = [...Array(r + 1 - l - 1).keys()].map(i => i + l);\n      }\n\n      if (this.state.total_pages == 0) {\n        this.state.page = 0;\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.num_results, \" Chemical Pollutants\")), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Filters\")), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Potency Source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_source: \"None\",\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"None\"), this.state.cancer_potency_sources.map(src => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_source: src,\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, src))), React.createElement(\"h5\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, this.state.inhalation_cancer_potency_source)))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Potency Units\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_units: \"None\",\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \"None\"), this.state.cancer_potency_units.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_units: unit,\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, unit))), React.createElement(\"h5\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, this.state.inhalation_cancer_potency_units)))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Concentration Source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_source: \"None\",\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"None\"), this.state.reference_concentration_source.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_source: unit,\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, unit))), React.createElement(\"h5\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, this.state.inhalation_reference_concentration_source)))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Concentration Units\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_units: \"None\",\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"None\"), this.state.reference_concentration_units.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_units: unit,\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, unit))), React.createElement(\"h5\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, this.state.inhalation_reference_concentration_units)))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Air Quality Source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_source: \"None\",\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, \"None\"), this.state.ambient_air_quality_std_source.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_source: unit,\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, unit))), React.createElement(\"h5\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, this.state.national_ambient_air_quality_std_source)))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Air Quality Units\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_units: \"None\",\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, \"None\"), this.state.ambient_air_quality_std_units.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_units: unit,\n            page: 1,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }, unit))), React.createElement(\"h5\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, this.state.national_ambient_air_quality_std_units))))), React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, \"Sort By\")), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: this.state.display_sort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"chemical_name\",\n            display_sort: \"Chemical Name\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"Chemical Name\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"inhalation_cancer_potency\",\n            display_sort: \"Potency\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, \"Potency\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"inhalation_reference_concentration\",\n            display_sort: \"Concentration\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, \"Concentration\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"national_ambient_air_quality_std\",\n            display_sort: \"Standard\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"Standard\"))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: this.state.display_order,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            order: \"asc\",\n            display_order: \"Ascending\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, \"Ascending\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            order: \"desc\",\n            display_order: \"Descending\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, \"Descending\"))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, \"Page \", this.state.page, \"/\", this.state.total_pages)), React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(Pagination, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, React.createElement(Pagination.First, {\n        onClick: e => this.setState({\n          page: 1,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }), React.createElement(Pagination.Prev, {\n        disabled: this.state.page <= 1,\n        onClick: e => this.setState({\n          page: this.state.page - 1,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }), range.map(page => React.createElement(Pagination.Item, {\n        active: page === this.state.page,\n        onClick: e => this.setState({\n          page: page,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, page)), React.createElement(Pagination.Next, {\n        disabled: this.state.page >= this.state.total_pages,\n        onClick: e => this.setState({\n          page: this.state.page + 1,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }), React.createElement(Pagination.Last, {\n        onClick: e => this.setState({\n          page: this.state.total_pages,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      })))), this.props.children);\n    } else {\n      this.componentDidMount();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://i.makeagif.com/media/9-30-2017/bhAyTs.gif\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      })));\n    }\n  }\n\n}\nexport function setUnknownAttributes(attribute) {\n  if (attribute) {\n    return attribute;\n  } else {\n    return \"Unknown\";\n  }\n}","map":{"version":3,"sources":["/home/jasonsim/School/cs373-airpollution/frontend/src/pages/pollutants/Pollutants.js"],"names":["React","Component","Jumbotron","Container","Card","Button","CardImg","CardTitle","CardText","CardHeader","CardDeck","CardColumns","CardSubtitle","CardBody","Form","FormGroup","Label","Input","FormText","Col","Row","Pagination","DropdownButton","Dropdown","Pollutantcards","fetch","require","ENDPOINT","buildOrder","fieldname","direction","buildFilter","operator","value","buildQuery","model","page","filterObjs","orderObjs","Pollutants","constructor","props","setPollutants","objects","setState","pollutants","state","componentDidMount","isloaded","render","PollutantsController","data","num_results","total_pages","states","time_zones","inhalation_cancer_potency","inhalation_cancer_potency_source","inhalation_cancer_potency_units","inhalation_reference_concentration","inhalation_reference_concentration_source","inhalation_reference_concentration_units","national_ambient_air_quality_std","national_ambient_air_quality_std_source","national_ambient_air_quality_std_units","cancer_potency_sources","cancer_potency_units","reference_concentration_source","reference_concentration_units","ambient_air_quality_std_source","ambient_air_quality_std_units","sort_by","display_sort","order","display_order","getQuery","then","res","json","getUniques","setObjects","objArray","key","uniqueVals","map","obj","indexOf","push","searchstring","span","l","r","range","Array","keys","i","color","src","unit","e","children","setUnknownAttributes","attribute"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,OAA7C,EAAsDC,SAAtD,EAAiEC,QAAjE,EACQC,UADR,EACqBC,QADrB,EAC+BC,WAD/B,EAC4CC,YAD5C,EAC0DC,QAD1D,EAEQC,IAFR,EAEaC,SAFb,EAEwBC,KAFxB,EAE+BC,KAF/B,EAEsCC,QAFtC,QAEsD,YAFtD;AAGA,SAAQC,GAAR,EAAaC,GAAb,EAAkBC,UAAlB,EAA8BC,cAA9B,EAA8CC,QAA9C,QAA6D,iBAA7D;AACA,SAAQC,cAAR,QAA6B,kBAA7B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;AAEA;;;;;;;;;;AASA,MAAMC,QAAQ,GAAG,qCAAjB;;AAEA,MAAMC,UAAU,GAAI,CAACC,SAAD,EAAWC,SAAX,KAAyB;AACzC,mCAA0BD,SAA1B,oCAA6DC,SAA7D;AACH,CAFD;;AAIA,MAAMC,WAAW,GAAG,CAACF,SAAD,EAAWG,QAAX,EAAoBC,KAApB,KAA8B;AAC9C,kCAAyBJ,SAAzB,6BAAqDG,QAArD,8BAAiFC,KAAjF;AACH,CAFD;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAOC,IAAP,EAAYC,UAAZ,EAAuBC,SAAvB,KAAqC;AAClD,4CAAmCH,KAAnC,mBAAiDC,IAAjD,gCAA2EC,UAA3E,+BAA0GC,SAA1G;AACL,CAFD;;AAIA,OAAO,MAAMC,UAAN,SAAyBtC,SAAzB,CAAmC;AACxCuC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAanBC,aAbmB,GAaFC,OAAD,IAAa;AAC3B,WAAKC,QAAL,CAAc;AACZC,QAAAA,UAAU,EAAGF;AADD,OAAd;AAGD,KAjBkB;;AAEjB,SAAKG,KAAL,GAAa;AACXD,MAAAA,UAAU,EAAG;AADF,KAAb;AAGD;;AAEDE,EAAAA,iBAAiB,GAAE;AACjB,SAAKH,QAAL,CAAc;AACZI,MAAAA,QAAQ,EAAE;AADE,KAAd;AAGD;;AAQDC,EAAAA,MAAM,GAAE;AACN;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,oBAAD;AAAsB,MAAA,UAAU,EAAI,KAAKP,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAgB,MAAA,UAAU,EAAI,KAAKI,KAAL,CAAWD,UAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF;AAOD;;AA7BuC;AAgC1C,OAAO,MAAMK,oBAAN,SAAmCjD,SAAnC,CAA6C;AAElDuC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKK,KAAL,GAAa;AACXK,MAAAA,IAAI,EAAG,EADI;AAEXC,MAAAA,WAAW,EAAE,IAFF;AAGXT,MAAAA,OAAO,EAAC,EAHG;AAIXP,MAAAA,IAAI,EAAE,IAJK;AAKXiB,MAAAA,WAAW,EAAE,IALF;AAMXC,MAAAA,MAAM,EAAG,EANE;AAOXC,MAAAA,UAAU,EAAG,EAPF;AAQXC,MAAAA,yBAAyB,EAAG,MARjB;AASXC,MAAAA,gCAAgC,EAAG,MATxB;AAUXC,MAAAA,+BAA+B,EAAG,MAVvB;AAWXC,MAAAA,kCAAkC,EAAG,MAX1B;AAYXC,MAAAA,yCAAyC,EAAG,MAZjC;AAaXC,MAAAA,wCAAwC,EAAG,MAbhC;AAcXC,MAAAA,gCAAgC,EAAG,MAdxB;AAeXC,MAAAA,uCAAuC,EAAG,MAf/B;AAgBXC,MAAAA,sCAAsC,EAAG,MAhB9B;AAiBXC,MAAAA,sBAAsB,EAAG,EAjBd;AAkBXC,MAAAA,oBAAoB,EAAG,EAlBZ;AAmBXC,MAAAA,8BAA8B,EAAG,EAnBtB;AAoBXC,MAAAA,6BAA6B,EAAG,EApBrB;AAqBXC,MAAAA,8BAA8B,EAAG,EArBtB;AAsBXC,MAAAA,6BAA6B,EAAG,EAtBrB;AAuBXC,MAAAA,OAAO,EAAG,eAvBC;AAwBXC,MAAAA,YAAY,EAAG,eAxBJ;AAyBXC,MAAAA,KAAK,EAAG,KAzBG;AA0BXC,MAAAA,aAAa,EAAG,WA1BL;AA2BXtC,MAAAA,IAAI,EAAE,CA3BK;AA4BXY,MAAAA,QAAQ,EAAG;AA5BA,KAAb;AA8BD;;AAECD,EAAAA,iBAAiB,GAAG;AAClBtB,IAAAA,KAAK,CAAC,KAAKkD,QAAL,EAAD,CAAL,CACIC,IADJ,CACSC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADhB,EAEIF,IAFJ,CAESzB,IAAI,IAAI;AACb,WAAKP,QAAL,CAAc;AACZO,QAAAA,IAAI,EAAGA,IADK;AAEZC,QAAAA,WAAW,EAAED,IAAI,CAACC,WAFN;AAGZT,QAAAA,OAAO,EAAEQ,IAAI,CAACR,OAHF;AAIZP,QAAAA,IAAI,EAAEe,IAAI,CAACf,IAJC;AAKZiB,QAAAA,WAAW,EAAEF,IAAI,CAACE,WALN;AAMZY,QAAAA,sBAAsB,EAAG,KAAKc,UAAL,CAAgB5B,IAAI,CAACR,OAArB,EAA6B,kCAA7B,CANb;AAOZuB,QAAAA,oBAAoB,EAAG,KAAKa,UAAL,CAAgB5B,IAAI,CAACR,OAArB,EAA6B,iCAA7B,CAPX;AAQZwB,QAAAA,8BAA8B,EAAG,KAAKY,UAAL,CAAgB5B,IAAI,CAACR,OAArB,EAA6B,2CAA7B,CARrB;AASZyB,QAAAA,6BAA6B,EAAG,KAAKW,UAAL,CAAgB5B,IAAI,CAACR,OAArB,EAA6B,0CAA7B,CATpB;AAUZ0B,QAAAA,8BAA8B,EAAG,KAAKU,UAAL,CAAgB5B,IAAI,CAACR,OAArB,EAA6B,yCAA7B,CAVrB;AAWZ2B,QAAAA,6BAA6B,EAAG,KAAKS,UAAL,CAAgB5B,IAAI,CAACR,OAArB,EAA6B,wCAA7B,CAXpB;AAYZK,QAAAA,QAAQ,EAAG;AAZC,OAAd;;AAcF,UAAI,KAAKP,KAAL,CAAWuC,UAAX,IAAyB,IAA7B,EAAkC;AAChC,aAAKvC,KAAL,CAAWuC,UAAX,CAAsB7B,IAAI,CAACR,OAA3B;AACD;AACF,KApBD;AAqBD;;AAEFoC,EAAAA,UAAU,CAACE,QAAD,EAAWC,GAAX,EAAgB;AACvB,UAAMC,UAAU,GAAG,EAAnB;AACAF,IAAAA,QAAQ,CAACG,GAAT,CAAcC,GAAG,IAAI;AACjB,UAAIF,UAAU,CAACG,OAAX,CAAmBD,GAAG,CAACH,GAAD,CAAtB,MAAiC,CAAC,CAAtC,EAAyC;AACrCC,QAAAA,UAAU,CAACI,IAAX,CAAgBF,GAAG,CAACH,GAAD,CAAnB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAOC,UAAP;AACF;;AAEAR,EAAAA,QAAQ,GAAG;AAET,QAAItC,UAAU,GAAGN,WAAW,CAAC,eAAD,EAAiB,MAAjB,eAA8B,KAAKU,KAAL,CAAW+C,YAAX,IAA2B,EAAzD,SAA5B;AACA,QAAIlD,SAAS,GAAGV,UAAU,CAAC,eAAD,EAAiB,KAAjB,CAA1B;;AAEA,QAAI,KAAKkB,KAAL,CAAWW,gCAAX,IAA+C,MAAnD,EAA2D;AACzDpB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,kCAAD,EAAoC,IAApC,EAAyC,KAAKe,KAAL,CAAWW,gCAApD,CAA7B;AACD;;AACD,QAAI,KAAKX,KAAL,CAAWY,+BAAX,IAA8C,MAAlD,EAA0D;AACxDrB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,iCAAD,EAAmC,IAAnC,EAAwC,KAAKe,KAAL,CAAWY,+BAAnD,CAA7B;AACD;;AACD,QAAI,KAAKZ,KAAL,CAAWc,yCAAX,IAAwD,MAA5D,EAAoE;AAClEvB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,2CAAD,EAA6C,IAA7C,EAAkD,KAAKe,KAAL,CAAWc,yCAA7D,CAA7B;AACD;;AACD,QAAI,KAAKd,KAAL,CAAWe,wCAAX,IAAuD,MAA3D,EAAmE;AACjExB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,0CAAD,EAA4C,IAA5C,EAAiD,KAAKe,KAAL,CAAWe,wCAA5D,CAA7B;AACD;;AACD,QAAI,KAAKf,KAAL,CAAWiB,uCAAX,IAAsD,MAA1D,EAAkE;AAChE1B,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,yCAAD,EAA2C,IAA3C,EAAgD,KAAKe,KAAL,CAAWiB,uCAA3D,CAA7B;AACD;;AACD,QAAI,KAAKjB,KAAL,CAAWkB,sCAAX,IAAqD,MAAzD,EAAiE;AAC/D3B,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,wCAAD,EAA0C,IAA1C,EAA+C,KAAKe,KAAL,CAAWkB,sCAA1D,CAA7B;AACD;;AAED1B,IAAAA,SAAS,GAAGV,UAAU,CAAC,KAAKkB,KAAL,CAAWyB,OAAZ,EAAoB,KAAKzB,KAAL,CAAW2B,KAA/B,CAAtB;AAEA,WAAOvC,UAAU,CAAC,YAAD,EAAc,KAAKY,KAAL,CAAWV,IAAzB,EAA8BC,UAA9B,EAAyCC,SAAzC,CAAjB;AACD;;AACDW,EAAAA,MAAM,GAAE;AACN,QAAI,KAAKH,KAAL,CAAWE,QAAf,EAAwB;AACxB,UAAIyC,IAAI,GAAG,CAAX;AACA,UAAIrD,IAAI,GAAG,KAAKU,KAAL,CAAWV,IAAtB;AACA,UAAIsD,CAAC,GAAGtD,IAAI,GAAIqD,IAAI,GAAG,CAAvB;AACA,UAAIE,CAAC,GAAGvD,IAAI,GAAIqD,IAAI,GAAG,CAAvB;AACA,UAAIG,KAAK,GAAG,EAAZ;AACA;;AACA,UAAI,KAAK9C,KAAL,CAAWO,WAAX,GAAyBoC,IAA7B,EAAmC;AACjCG,QAAAA,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAE,KAAK/C,KAAL,CAAWO,WAAX,GAAyB,CAA1B,GAA+B,CAAhC,CAAL,CAAwCyC,IAAxC,EAAJ,EAAoDV,GAApD,CAAwDW,CAAC,IAAIA,CAAC,GAAG,CAAjE,CAAR;AACD,OAFD,MAEO,IAAI3D,IAAI,GAAGqD,IAAP,GAAc,KAAK3C,KAAL,CAAWO,WAA7B,EAA0C;AAC/C;AACAuC,QAAAA,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAE,KAAK/C,KAAL,CAAWO,WAAZ,IAA4B,KAAKP,KAAL,CAAWO,WAAX,GAAyBoC,IAArD,CAAD,CAAL,CAAkEK,IAAlE,EAAJ,EAA8EV,GAA9E,CAAkFW,CAAC,IAAK,KAAKjD,KAAL,CAAWO,WAAX,GAAyBoC,IAA1B,GAAkCM,CAAlC,GAAsC,CAA7H,CAAR;AACD,OAHM,MAGA,IAAI3D,IAAI,GAAGqD,IAAP,GAAc,CAAlB,EAAqB;AAC1B;AACAG,QAAAA,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAEJ,IAAI,GAAG,CAAR,GAAa,CAAd,CAAL,CAAsBK,IAAtB,EAAJ,EAAkCV,GAAlC,CAAsCW,CAAC,IAAIA,CAAC,GAAG,CAA/C,CAAR;AACD,OAHM,MAGA;AACL;AACAH,QAAAA,KAAK,GAAG,CAAC,GAAGC,KAAK,CAAEF,CAAC,GAAG,CAAL,GAAUD,CAAV,GAAY,CAAb,CAAL,CAAqBI,IAArB,EAAJ,EAAiCV,GAAjC,CAAqCW,CAAC,IAAIA,CAAC,GAAGL,CAA9C,CAAR;AACD;;AACD,UAAG,KAAK5C,KAAL,CAAWO,WAAX,IAA0B,CAA7B,EAA+B;AAC7B,aAAKP,KAAL,CAAWV,IAAX,GAAkB,CAAlB;AACD;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAE;AAAC4D,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC,KAAKlD,KAAL,CAAWM,WAA3C,yBADJ,CAFJ,EAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAE;AAAC4C,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAIE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,gBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKpD,QAAL,CAAc;AAACa,YAAAA,gCAAgC,EAAG,MAApC;AAA4CrB,YAAAA,IAAI,EAAG,CAAnD;AAAsDY,YAAAA,QAAQ,EAAG;AAAjE,WAAd;AAAwF,SAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAKF,KAAL,CAAWmB,sBAAX,CAAkCmB,GAAlC,CAAuCa,GAAG,IACzC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKrD,QAAL,CAAc;AACZa,YAAAA,gCAAgC,EAAGwC,GADvB;AAEZ7D,YAAAA,IAAI,EAAG,CAFK;AAGZY,YAAAA,QAAQ,EAAG;AAHC,WAAd;AAKD,SAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOCiD,GAPD,CADD,CAJL,CADF,EAiBE;AAAI,QAAA,KAAK,EAAE;AAACD,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlD,KAAL,CAAWW,gCAApB,CAA/B,CAjBF,CADF,CAJF,EAyBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKb,QAAL,CAAc;AAACc,YAAAA,+BAA+B,EAAG,MAAnC;AAA2CtB,YAAAA,IAAI,EAAG,CAAlD;AAAoDY,YAAAA,QAAQ,EAAG;AAA/D,WAAd;AAAsF,SAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAKF,KAAL,CAAWoB,oBAAX,CAAgCkB,GAAhC,CAAqCc,IAAI,IACxC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKtD,QAAL,CAAc;AACZc,YAAAA,+BAA+B,EAAGwC,IADtB;AAEZ9D,YAAAA,IAAI,EAAG,CAFK;AAGZY,YAAAA,QAAQ,EAAG;AAHC,WAAd;AAKD,SAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOCkD,IAPD,CADD,CAJL,CADD,EAiBC;AAAI,QAAA,KAAK,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlD,KAAL,CAAWY,+BAApB,CAA/B,CAjBD,CADD,CAzBJ,EA8CI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,sBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKd,QAAL,CAAc;AAACgB,YAAAA,yCAAyC,EAAG,MAA7C;AAAqDxB,YAAAA,IAAI,EAAG,CAA5D;AAA8DY,YAAAA,QAAQ,EAAG;AAAzE,WAAd;AAAgG,SAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAKF,KAAL,CAAWqB,8BAAX,CAA0CiB,GAA1C,CAA+Cc,IAAI,IAClD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKtD,QAAL,CAAc;AACZgB,YAAAA,yCAAyC,EAAGsC,IADhC;AAEZ9D,YAAAA,IAAI,EAAG,CAFK;AAGZY,YAAAA,QAAQ,EAAG;AAHC,WAAd;AAKD,SAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOCkD,IAPD,CADD,CAJL,CADD,EAiBC;AAAI,QAAA,KAAK,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlD,KAAL,CAAWc,yCAApB,CAA/B,CAjBD,CADD,CA9CJ,EAmEI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKhB,QAAL,CAAc;AAACiB,YAAAA,wCAAwC,EAAG,MAA5C;AAAoDzB,YAAAA,IAAI,EAAG,CAA3D;AAA6DY,YAAAA,QAAQ,EAAG;AAAxE,WAAd;AAA+F,SAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAKF,KAAL,CAAWsB,6BAAX,CAAyCgB,GAAzC,CAA8Cc,IAAI,IACjD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKtD,QAAL,CAAc;AACZiB,YAAAA,wCAAwC,EAAGqC,IAD/B;AAEZ9D,YAAAA,IAAI,EAAG,CAFK;AAGZY,YAAAA,QAAQ,EAAG;AAHC,WAAd;AAKD,SAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOCkD,IAPD,CADD,CAJL,CADD,EAiBC;AAAI,QAAA,KAAK,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlD,KAAL,CAAWe,wCAApB,CAA/B,CAjBD,CADD,CAnEJ,EAwFI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,oBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKjB,QAAL,CAAc;AAACmB,YAAAA,uCAAuC,EAAG,MAA3C;AAAmD3B,YAAAA,IAAI,EAAG,CAA1D;AAA4DY,YAAAA,QAAQ,EAAG;AAAvE,WAAd;AAA8F,SAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAKF,KAAL,CAAWuB,8BAAX,CAA0Ce,GAA1C,CAA+Cc,IAAI,IAClD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKtD,QAAL,CAAc;AACZmB,YAAAA,uCAAuC,EAAGmC,IAD9B;AAEZ9D,YAAAA,IAAI,EAAG,CAFK;AAGZY,YAAAA,QAAQ,EAAG;AAHC,WAAd;AAKD,SAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOCkD,IAPD,CADD,CAJL,CADD,EAiBC;AAAI,QAAA,KAAK,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlD,KAAL,CAAWiB,uCAApB,CAA/B,CAjBD,CADD,CAxFJ,EA6GI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,mBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKnB,QAAL,CAAc;AAACoB,YAAAA,sCAAsC,EAAG,MAA1C;AAAkD5B,YAAAA,IAAI,EAAG,CAAzD;AAA2DY,YAAAA,QAAQ,EAAG;AAAtE,WAAd;AAA6F,SAA5H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAKF,KAAL,CAAWwB,6BAAX,CAAyCc,GAAzC,CAA8Cc,IAAI,IACjD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKtD,QAAL,CAAc;AACZoB,YAAAA,sCAAsC,EAAGkC,IAD7B;AAEZ9D,YAAAA,IAAI,EAAG,CAFK;AAGZY,YAAAA,QAAQ,EAAG;AAHC,WAAd;AAKD,SAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOCkD,IAPD,CADD,CAJL,CADD,EAiBC;AAAI,QAAA,KAAK,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKlD,KAAL,CAAWkB,sCAApB,CAA/B,CAjBD,CADD,CA7GJ,CADA,EAoIG,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACD;AAAI,QAAA,KAAK,EAAE;AAACgC,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/B,CADC,EAED,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAE,KAAKlD,KAAL,CAAW0B,YAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK5B,QAAL,CAAc;AAAE2B,YAAAA,OAAO,EAAG,eAAZ;AAA6BC,YAAAA,YAAY,EAAG,eAA5C;AAA6DxB,YAAAA,QAAQ,EAAG;AAAxE,WAAd;AAA+F,SAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,EAIC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKJ,QAAL,CAAc;AAAE2B,YAAAA,OAAO,EAAG,2BAAZ;AAAyCC,YAAAA,YAAY,EAAG,SAAxD;AAAmExB,YAAAA,QAAQ,EAAG;AAA9E,WAAd;AAAqG,SAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJD,EAOE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKJ,QAAL,CAAc;AAAE2B,YAAAA,OAAO,EAAG,oCAAZ;AAAkDC,YAAAA,YAAY,EAAG,eAAjE;AAAkFxB,YAAAA,QAAQ,EAAG;AAA7F,WAAd;AAAoH,SAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPF,EAUE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKJ,QAAL,CAAc;AAAE2B,YAAAA,OAAO,EAAG,kCAAZ;AAAgDC,YAAAA,YAAY,EAAG,UAA/D;AAA2ExB,YAAAA,QAAQ,EAAG;AAAtF,WAAd;AAA6G,SAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADJ,CAFC,EAkBD,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAI,KAAKF,KAAL,CAAW4B,aAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9B,QAAL,CAAc;AAAE6B,YAAAA,KAAK,EAAG,KAAV;AAAiBC,YAAAA,aAAa,EAAG,WAAjC;AAA8C1B,YAAAA,QAAQ,EAAG;AAAzD,WAAd;AAAgF,SAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKJ,QAAL,CAAc;AAAE6B,YAAAA,KAAK,EAAG,MAAV;AAAkBC,YAAAA,aAAa,EAAG,YAAlC;AAAgD1B,YAAAA,QAAQ,EAAG;AAA3D,WAAd;AAAkF,SAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADJ,CAlBC,CApIH,CALJ,EAwKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxKF,EAyKE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AAAI,QAAA,KAAK,EAAE;AAACgD,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqC,KAAKlD,KAAL,CAAWV,IAAhD,OAAuD,KAAKU,KAAL,CAAWO,WAAlE,CAAR,CADF,EAEE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,UAAD,CAAY,KAAZ;AACE,QAAA,OAAO,EAAE8C,CAAC,IAAI,KAAKvD,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAG,CAAT;AAAYY,UAAAA,QAAQ,EAAG;AAAvB,SAAd,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAOE,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWV,IAAX,IAAmB,CAD/B;AAEE,QAAA,OAAO,EAAE+D,CAAC,IAAI,KAAKvD,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAG,KAAKU,KAAL,CAAWV,IAAX,GAAiB,CAA1B;AAA8BY,UAAAA,QAAQ,EAAG;AAAzC,SAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAaG4C,KAAK,CAACR,GAAN,CAAUhD,IAAI,IACb,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,MAAM,EAAEA,IAAI,KAAK,KAAKU,KAAL,CAAWV,IAD9B;AAEE,QAAA,OAAO,EAAE+D,CAAC,IAAI,KAAKvD,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAGA,IAAT;AAAgBY,UAAAA,QAAQ,EAAG;AAA3B,SAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGZ,IAJH,CADD,CAbH,EAuBE,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,QAAQ,EAAE,KAAKU,KAAL,CAAWV,IAAX,IAAmB,KAAKU,KAAL,CAAWO,WAD1C;AAEE,QAAA,OAAO,EAAE8C,CAAC,IAAI,KAAKvD,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAG,KAAKU,KAAL,CAAWV,IAAX,GAAiB,CAA1B;AAA8BY,UAAAA,QAAQ,EAAG;AAAzC,SAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBF,EA6BE,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,OAAO,EAAEmD,CAAC,IAAI,KAAKvD,QAAL,CAAc;AAAER,UAAAA,IAAI,EAAG,KAAKU,KAAL,CAAWO,WAApB;AAAiCL,UAAAA,QAAQ,EAAG;AAA5C,SAAd,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7BF,CADF,CAFF,CAzKF,EA+MO,KAAKP,KAAL,CAAW2D,QA/MlB,CADF;AAmND,KAzOC,MAyOK;AACL,WAAKrD,iBAAL;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AAAK,QAAA,GAAG,EAAG,mDAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR,CADD,CADF;AAKF;AACD;;AApViD;AAuVpD,OAAO,SAASsD,oBAAT,CAA8BC,SAA9B,EAAyC;AAC9C,MAAIA,SAAJ,EAAe;AACZ,WAAOA,SAAP;AACF,GAFD,MAEO;AACJ,WAAO,SAAP;AACF;AACF","sourcesContent":["import React, { Component } from 'react';\nimport { Jumbotron, Container, Card, Button, CardImg, CardTitle, CardText,\n        CardHeader,  CardDeck, CardColumns, CardSubtitle, CardBody,\n        Form,FormGroup, Label, Input, FormText } from 'reactstrap';\nimport {Col, Row, Pagination, DropdownButton, Dropdown} from 'react-bootstrap';\nimport {Pollutantcards} from './PollutantItems'\nconst fetch = require(\"node-fetch\");\n\n/*\nSources:\n\nPagination sources:\nhttps://github.com/react-bootstrap/pagination\nhttps://www.npmjs.com/package/react-ultimate-pagination\nhttps://codepen.io/joedazza/pen/BVXVej\n*/\n\nconst ENDPOINT = 'https://api.howsmyair.me/pollutants';\n\nconst buildOrder  = (fieldname,direction) => {\n    return `{%22field%22:%22${fieldname}%22,%22direction%22:%22${direction}%22}`\n}\n\nconst buildFilter = (fieldname,operator,value) => {\n    return `{%22name%22:%22${fieldname}%22,%22op%22:%22${operator}%22,%22val%22:%22${value}%22}`\n}\n\nconst buildQuery = (model,page,filterObjs,orderObjs) => {\n      return `https://api.howsmyair.me/${model}?page=${page}&q={%22filters%22:[${filterObjs}],%22order_by%22:[${orderObjs}]}`\n}\n\nexport class Pollutants extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pollutants : null,\n    }\n  }\n\n  componentDidMount(){\n    this.setState({\n      isloaded: true\n    })\n  }\n\n  setPollutants = (objects) => {\n    this.setState({\n      pollutants : objects,\n    })\n  }\n\n  render(){\n    // really hacky but it works for calling back without infinite looping\n    return(\n      <div>\n        <PollutantsController setObjects = {this.setPollutants}>\n          <Pollutantcards pollutants = {this.state.pollutants}/>\n        </PollutantsController>\n      </div>\n    );      \n  }\n}\n\nexport class PollutantsController extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      data : {},\n      num_results: null,\n      objects:[],\n      page: null,\n      total_pages: null,\n      states : [],\n      time_zones : [],\n      inhalation_cancer_potency : \"None\",\n      inhalation_cancer_potency_source : \"None\",\n      inhalation_cancer_potency_units : \"None\",\n      inhalation_reference_concentration : \"None\",\n      inhalation_reference_concentration_source : \"None\",\n      inhalation_reference_concentration_units : \"None\",\n      national_ambient_air_quality_std : \"None\",\n      national_ambient_air_quality_std_source : \"None\",\n      national_ambient_air_quality_std_units : \"None\",\n      cancer_potency_sources : [],\n      cancer_potency_units : [],\n      reference_concentration_source : [],\n      reference_concentration_units : [],\n      ambient_air_quality_std_source : [],\n      ambient_air_quality_std_units : [],\n      sort_by : \"chemical_name\",\n      display_sort : \"Chemical Name\",\n      order : \"asc\",\n      display_order : \"Ascending\",\n      page: 1,\n      isloaded : false,\n    };\n  }\n\n    componentDidMount() {\n      fetch(this.getQuery())\n         .then(res => res.json())\n         .then(data => {\n          this.setState({\n            data : data,\n            num_results: data.num_results,\n            objects: data.objects,\n            page: data.page,\n            total_pages: data.total_pages,\n            cancer_potency_sources : this.getUniques(data.objects,\"inhalation_cancer_potency_source\"),\n            cancer_potency_units : this.getUniques(data.objects,\"inhalation_cancer_potency_units\"),\n            reference_concentration_source : this.getUniques(data.objects,\"inhalation_reference_concentration_source\"),\n            reference_concentration_units : this.getUniques(data.objects,\"inhalation_reference_concentration_units\"),\n            ambient_air_quality_std_source : this.getUniques(data.objects,\"national_ambient_air_quality_std_source\"),\n            ambient_air_quality_std_units : this.getUniques(data.objects,\"national_ambient_air_quality_std_units\"),\n            isloaded : true,\n          })\n        if (this.props.setObjects != null){\n          this.props.setObjects(data.objects)\n        }\n      })\n    };\n\n   getUniques(objArray, key) {\n      const uniqueVals = [];\n      objArray.map( obj => {\n          if (uniqueVals.indexOf(obj[key]) === -1) {\n              uniqueVals.push(obj[key])\n          };\n      });\n      return(uniqueVals);\n   }\n\n    getQuery() {\n\n      let filterObjs = buildFilter(\"chemical_name\",\"like\",`%25${this.props.searchstring || ''}%25`);\n      let orderObjs = buildOrder(\"chemical_name\",\"asc\")\n\n      if (this.state.inhalation_cancer_potency_source != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_cancer_potency_source\",\"eq\",this.state.inhalation_cancer_potency_source)\n      }\n      if (this.state.inhalation_cancer_potency_units != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_cancer_potency_units\",\"eq\",this.state.inhalation_cancer_potency_units)\n      }\n      if (this.state.inhalation_reference_concentration_source != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_reference_concentration_source\",\"eq\",this.state.inhalation_reference_concentration_source)\n      }\n      if (this.state.inhalation_reference_concentration_units != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_reference_concentration_units\",\"eq\",this.state.inhalation_reference_concentration_units)\n      }\n      if (this.state.national_ambient_air_quality_std_source != \"None\") {\n        filterObjs += \",\"+buildFilter(\"national_ambient_air_quality_std_source\",\"eq\",this.state.national_ambient_air_quality_std_source)\n      }\n      if (this.state.national_ambient_air_quality_std_units != \"None\") {\n        filterObjs += \",\"+buildFilter(\"national_ambient_air_quality_std_units\",\"eq\",this.state.national_ambient_air_quality_std_units)\n      }\n\n      orderObjs = buildOrder(this.state.sort_by,this.state.order)\n\n      return buildQuery(\"pollutants\",this.state.page,filterObjs,orderObjs);\n    }\n    render(){\n      if (this.state.isloaded){\n      let span = 4\n      let page = this.state.page\n      let l = page - (span / 2)\n      let r = page + (span / 2)\n      let range = []\n      /*If there aren't enough pages to have dynamically changing page values*/\n      if (this.state.total_pages < span) {\n        range = [...Array((this.state.total_pages + 1) - 1).keys()].map(i => i + 1)\n      } else if (page + span > this.state.total_pages) {\n        /*At the right bound*/\n        range = [...Array((this.state.total_pages) - (this.state.total_pages - span)).keys()].map(i => (this.state.total_pages - span) + i + 1)\n      } else if (page - span < 0) {\n        /*At the left bound*/\n        range = [...Array((span + 1) - 1).keys()].map(i => i + 1)\n      } else {\n        /*At somewhere in between*/\n        range = [...Array((r + 1) - l-1).keys()].map(i => i + l )\n      }\n      if(this.state.total_pages == 0){\n        this.state.page = 0;\n      }\n      return(\n        <div>\n          <br/>\n            <Row className=\"justify-content-md-center\">\n                <h1 style={{color: '#1976d2'}}>{this.state.num_results} Chemical Pollutants</h1>\n            </Row>\n            <Jumbotron>\n            <Row className=\"justify-content-md-center\">\n              <Col md=\"auto\">\n                <h3 style={{color: '#1976d2'}}>Filters</h3>\n              </Col>\n              <Col md=\"auto\">\n                <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Potency Source\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_cancer_potency_source : \"None\", page : 1 ,isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.cancer_potency_sources.map( src => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_cancer_potency_source : src,\n                            page : 1,\n                            isloaded : false\n                          });\n                        }}>\n                        {src}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  <h5 style={{color: '#1976d2'}}><center>{this.state.inhalation_cancer_potency_source}</center></h5>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Potency Units\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_cancer_potency_units : \"None\", page : 1,isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.cancer_potency_units.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_cancer_potency_units : unit,\n                            page : 1,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  <h5 style={{color: '#1976d2'}}><center>{this.state.inhalation_cancer_potency_units}</center></h5>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Concentration Source\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_reference_concentration_source : \"None\", page : 1,isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.reference_concentration_source.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_reference_concentration_source : unit,\n                            page : 1,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  <h5 style={{color: '#1976d2'}}><center>{this.state.inhalation_reference_concentration_source}</center></h5>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Concentration Units\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_reference_concentration_units : \"None\", page : 1,isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.reference_concentration_units.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_reference_concentration_units : unit,\n                            page : 1,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  <h5 style={{color: '#1976d2'}}><center>{this.state.inhalation_reference_concentration_units}</center></h5>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Air Quality Source\">\n                      <Dropdown.Item onClick={() => {this.setState({national_ambient_air_quality_std_source : \"None\", page : 1,isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.ambient_air_quality_std_source.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            national_ambient_air_quality_std_source : unit,\n                            page : 1,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  <h5 style={{color: '#1976d2'}}><center>{this.state.national_ambient_air_quality_std_source}</center></h5>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Air Quality Units\">\n                      <Dropdown.Item onClick={() => {this.setState({national_ambient_air_quality_std_units : \"None\", page : 1,isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.ambient_air_quality_std_units.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            national_ambient_air_quality_std_units : unit,\n                            page : 1,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  <h5 style={{color: '#1976d2'}}><center>{this.state.national_ambient_air_quality_std_units}</center></h5>\n                  </center>\n                </Col>\n               </Row>\n               <Row className=\"justify-content-md-center\">\n              <h3 style={{color: '#1976d2'}}><center>Sort By</center></h3>\n              <Col md=\"auto\">\n                  <DropdownButton id=\"dropdown-basic-button\" title={this.state.display_sort}>\n                   <Dropdown.Item onClick={() => {this.setState({ sort_by : \"chemical_name\", display_sort : \"Chemical Name\", isloaded : false});}}>\n                      Chemical Name\n                   </Dropdown.Item>\n                   <Dropdown.Item onClick={() => {this.setState({ sort_by : \"inhalation_cancer_potency\", display_sort : \"Potency\", isloaded : false});}}>\n                      Potency\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"inhalation_reference_concentration\", display_sort : \"Concentration\", isloaded : false});}}>\n                      Concentration\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"national_ambient_air_quality_std\", display_sort : \"Standard\", isloaded : false});}}>\n                      Standard\n                    </Dropdown.Item>\n                  </DropdownButton>\n              </Col>\n              <Col md=\"auto\">\n                  <DropdownButton id=\"dropdown-basic-button\" title = {this.state.display_order}>\n                    <Dropdown.Item onClick={() => {this.setState({ order : \"asc\", display_order : \"Ascending\", isloaded : false});}}>\n                      Ascending\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ order : \"desc\", display_order : \"Descending\", isloaded : false});}}>\n                      Descending\n                    </Dropdown.Item>\n                  </DropdownButton>\n              </Col>\n            </Row>\n            </Jumbotron>\n\n          <br/>\n          <Container>\n            <center><h4 style={{color: '#1976d2'}}>Page {this.state.page}/{this.state.total_pages}</h4></center>\n            <Row className=\"justify-content-md-center\">\n              <Pagination>\n                {/*First Page*/}\n                <Pagination.First\n                  onClick={e => this.setState({ page : 1, isloaded : false})}\n                />\n\n                {/*Previous Page*/}\n                <Pagination.Prev\n                  disabled={this.state.page <= 1}\n                  onClick={e => this.setState({ page : this.state.page -1 , isloaded : false})}\n                />\n\n                {/*Eveything in between - see block before return statement*/}\n                {range.map(page => (\n                  <Pagination.Item\n                    active={page === this.state.page}\n                    onClick={e => this.setState({ page : page , isloaded : false})}\n                  >\n                    {page}\n                  </Pagination.Item>\n                ))}\n\n                {/*Next Page*/}\n                <Pagination.Next\n                  disabled={this.state.page >= this.state.total_pages}\n                  onClick={e => this.setState({ page : this.state.page +1 , isloaded : false})}\n                />\n\n                {/*Last Page*/}\n                <Pagination.Last\n                  onClick={e => this.setState({ page : this.state.total_pages, isloaded : false})}\n                />\n              </Pagination>\n            </Row>\n           </Container>\n              {this.props.children}\n        </div>\n      );\n    } else {\n      this.componentDidMount();\n      return (\n        <div>\n         <center><img src = \"https://i.makeagif.com/media/9-30-2017/bhAyTs.gif\"/></center>\n        </div>\n      );\n   }\n  } \n}\n\nexport function setUnknownAttributes(attribute) {\n  if (attribute) {\n     return attribute;\n  } else {\n     return \"Unknown\";\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}