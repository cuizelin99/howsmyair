{"ast":null,"code":"import _slicedToArray from \"/Users/jasonlihuang/Documents/cs373-airpollution/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/jasonlihuang/Documents/cs373-airpollution/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/jasonlihuang/Documents/cs373-airpollution/frontend/src/visualizations/visual2.js\";\nimport React from \"react\";\nimport StateMap from \"./StateMap\";\nimport axios from \"axios\";\n\nclass Visuals extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (event, value) => {\n      this.setState({\n        value\n      });\n    };\n\n    this.state = {\n      value: 0,\n      illnessStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      pollutantStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      loaded: false\n    };\n  }\n\n  updateBarData(locationData, pollData) {\n    locationData.data.objects.forEach(location => {\n      var updatedDict = _objectSpread({}, this.state.illnessStateDict);\n\n      updatedDict[location.state_id] = updatedDict[location.state_id] + 1;\n      this.setState(prevState => ({\n        illnessStateDict: updatedDict\n      }));\n    });\n    pollData.data.forEach(org => {\n      var updatedDict = _objectSpread({}, this.state.pollutantStateDict);\n\n      updatedDict[org.state] = updatedDict[org.state] + 1;\n      this.setState(prevState => ({\n        pollutantStateDict: updatedDict\n      }));\n    });\n  }\n\n  scrapeProjectInfo() {\n    axios.all([axios.get(\"https://api.howsmyair.me/locations\"), axios.get(\"https://api.howsmyair.me/pollutants\")]).then(axios.spread((locationReponse, pollResponse) => {\n      this.updateBarData(locationReponse, pollResponse);\n      this.setState({\n        loaded: true\n      });\n    }));\n  }\n\n  componentDidMount() {\n    this.scrapeProjectInfo();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const _this$state = this.state,\n          illnessStateDict = _this$state.illnessStateDict,\n          pollutantStateDict = _this$state.pollutantStateDict,\n          loaded = _this$state.loaded;\n    const _this$state2 = this.state,\n          billStateDict = _this$state2.billStateDict,\n          efpollutantStateDict = _this$state2.efpollutantStateDict,\n          progStateDict = _this$state2.progStateDict;\n    var data = [];\n\n    if (illnessStateDict != null) {\n      let temp = this.state.illnessStateDict;\n\n      for (const _ref of Object.entries(temp)) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        const key = _ref2[0];\n        const value = _ref2[1];\n        var tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        data.push(tempDict);\n      }\n    }\n\n    var dataEF = [];\n\n    if (efpollutantStateDict != null) {\n      let temp = efpollutantStateDict;\n\n      for (const _ref3 of Object.entries(temp)) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n\n        const key = _ref4[0];\n        const value = _ref4[1];\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        dataEF.push(tempDict);\n      }\n    }\n\n    var pollData = [];\n\n    if (pollutantStateDict != null) {\n      let temp = this.state.pollutantStateDict;\n\n      for (const _ref5 of Object.entries(temp)) {\n        var _ref6 = _slicedToArray(_ref5, 2);\n\n        const key = _ref6[0];\n        const value = _ref6[1];\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        pollData.push(tempDict);\n      }\n    }\n\n    if (loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(StateMap, {\n        illnessData: illnessStateDict,\n        pollutantData: pollutantStateDict,\n        first: \"Illnesses:\",\n        second: \"Pollutants:\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }));\n    }\n\n    if (!loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"HELLO!!!\");\n    }\n  }\n\n}\n\nexport default Visuals;","map":{"version":3,"sources":["/Users/jasonlihuang/Documents/cs373-airpollution/frontend/src/visualizations/visual2.js"],"names":["React","StateMap","axios","Visuals","Component","constructor","props","handleChange","event","value","setState","state","illnessStateDict","AL","AK","AZ","AR","CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","VI","WA","WV","WI","WY","pollutantStateDict","loaded","updateBarData","locationData","pollData","data","objects","forEach","location","updatedDict","state_id","prevState","org","scrapeProjectInfo","all","get","then","spread","locationReponse","pollResponse","componentDidMount","render","classes","billStateDict","efpollutantStateDict","progStateDict","temp","Object","entries","key","tempDict","push","dataEF"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport StateMap from \"./StateMap\";\n\nimport axios from \"axios\";\n\n\n\n\nclass Visuals extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n      illnessStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      pollutantStateDict: {\n        AL: 0,\n        AK: 0,\n        AZ: 0,\n        AR: 0,\n        CA: 0,\n        CO: 0,\n        CT: 0,\n        DE: 0,\n        FL: 0,\n        GA: 0,\n        HI: 0,\n        ID: 0,\n        IL: 0,\n        IN: 0,\n        IA: 0,\n        KS: 0,\n        KY: 0,\n        LA: 0,\n        ME: 0,\n        MD: 0,\n        MA: 0,\n        MI: 0,\n        MN: 0,\n        MS: 0,\n        MO: 0,\n        MT: 0,\n        NE: 0,\n        NV: 0,\n        NH: 0,\n        NJ: 0,\n        NM: 0,\n        NY: 0,\n        NC: 0,\n        ND: 0,\n        OH: 0,\n        OK: 0,\n        OR: 0,\n        PA: 0,\n        RI: 0,\n        SC: 0,\n        SD: 0,\n        TN: 0,\n        TX: 0,\n        UT: 0,\n        VT: 0,\n        VA: 0,\n        VI: 0,\n        WA: 0,\n        WV: 0,\n        WI: 0,\n        WY: 0\n      },\n      loaded: false\n    };\n  }\n\n  updateBarData(locationData, pollData) {\n      locationData.data.objects.forEach(location => {\n        var updatedDict = { ...this.state.illnessStateDict };\n        updatedDict[location.state_id] = updatedDict[location.state_id] + 1;\n        this.setState(prevState => ({\n          illnessStateDict: updatedDict\n        }));\n      });\n      pollData.data.forEach(org => {\n        var updatedDict = { ...this.state.pollutantStateDict };\n        updatedDict[org.state] = updatedDict[org.state] + 1;\n        this.setState(prevState => ({\n          pollutantStateDict: updatedDict\n        }));\n      });\n    }\n\n\n    scrapeProjectInfo() {\n      axios\n        .all([\n          axios.get(\"https://api.howsmyair.me/locations\"),\n          axios.get(\"https://api.howsmyair.me/pollutants\"),\n        ])\n        .then(\n          axios.spread((locationReponse, pollResponse) => {\n            this.updateBarData(locationReponse, pollResponse);\n            this.setState({\n              loaded: true\n            });\n          })\n        );\n    }\n\n    componentDidMount() {\n      this.scrapeProjectInfo();\n    }\n\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { illnessStateDict, pollutantStateDict, loaded } = this.state;\n\n    const { billStateDict, efpollutantStateDict, progStateDict } = this.state;\n    var data = [];\n    if (illnessStateDict != null) {\n      let temp = this.state.illnessStateDict;\n      for (const [key, value] of Object.entries(temp)) {\n        var tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        data.push(tempDict);\n      }\n    }\n    var dataEF = [];\n    if (efpollutantStateDict != null) {\n      let temp = efpollutantStateDict;\n      for (const [key, value] of Object.entries(temp)) {\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        dataEF.push(tempDict);\n      }\n    }\n    var pollData = [];\n    if (pollutantStateDict != null) {\n      let temp = this.state.pollutantStateDict;\n      for (const [key, value] of Object.entries(temp)) {\n        let tempDict = {};\n        tempDict[\"label\"] = key;\n        tempDict[\"value\"] = value;\n        pollData.push(tempDict);\n      }\n    }\n    if (loaded) {\n      return (\n        <div>\n          <StateMap\n            illnessData={illnessStateDict}\n            pollutantData={pollutantStateDict}\n            first=\"Illnesses:\"\n            second=\"Pollutants:\"\n          />\n        </div>\n      );\n    }\n    if (!loaded) {\n      return (\n        <div>\n         HELLO!!!\n        </div>\n      );\n    }\n  }\n}\n\nexport default Visuals;\n"]},"metadata":{},"sourceType":"module"}