{"ast":null,"code":"var _jsxFileName = \"/Users/jasonlihuang/Documents/cs373-airpollution/frontend/src/pages/pollutants/Pollutants.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Jumbotron, Container, Card, Button, CardImg, CardTitle, CardText, CardHeader, CardDeck, CardColumns, CardSubtitle, CardBody, NavLink, UncontrolledCarousel, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { Image, Col, Row, Pagination, DropdownButton, Dropdown, ButtonToolbar } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Link, Switch, BrowserHistory } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { createUltimatePagination, ITEM_TYPES } from 'react-ultimate-pagination';\nimport ReactDOM from 'react-dom';\nimport Illnesses from '../illnesses/Illnesses';\nimport IllnessInstance from '../illnesses/IllnessInstance';\nimport { Locations, Location } from '../locations/Locations';\nimport LocationInstance from '../locations/LocationInstance';\n/**\nSources:\n\nPagination sources:\nhttps://github.com/react-bootstrap/pagination\nhttps://www.npmjs.com/package/react-ultimate-pagination\nhttps://codepen.io/joedazza/pen/BVXVej\n**/\n\nconst ENDPOINT = 'https://api.howsmyair.me/pollutants';\nexport class Pollutant extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      related_illnesses: [],\n      related_locations: []\n    };\n  }\n\n  componentDidMount() {\n    const key = this.props.match.params.key; // get location\n\n    fetch(ENDPOINT + '/' + key).then(res => res.json()).then(data => {\n      this.setState({\n        data: data,\n        related_illnesses: data.related_illnesses,\n        related_locations: data.related_locations\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.state.data.chemical_name), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Inhalation Cancer Potency\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), \"Potency: \", this.state.data.inhalation_cancer_potency, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), \"Units: \", this.state.data.inhalation_cancer_potency_units, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), \"Source: \", this.state.data.inhalation_cancer_potency_source, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Inhalation Reference Concentration\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), \"Concentration: \", this.state.data.inhalation_reference_concentration, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), \"Units: \", this.state.data.inhalation_reference_concentration_units, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), \"Source: \", this.state.data.inhalation_reference_concentration_source, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"National Ambient Air Quality Standards\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), \"Standard: \", this.state.data.national_ambient_air_quality_std, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), \"Units: \", this.state.data.national_ambient_air_quality_std_units, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), \"Source: \", this.state.data.national_ambient_air_quality_std_source, React.createElement(\"img\", {\n      src: this.state.data.chemspider_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Related Illnesses\"), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.related_illnesses.map(illness => React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(IllnessInstance, {\n      illness_name: illness.illness_name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))))), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Related Locations\"), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.related_locations.map(location => React.createElement(CardColumns, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(LocationInstance, {\n      location_id: location.location_id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nconst buildOrder = (fieldname, direction) => {\n  return \"{%22field%22:%22\".concat(fieldname, \"%22,%22direction%22:%22\").concat(direction, \"%22}\");\n};\n\nconst buildFilter = (fieldname, operator, value) => {\n  return \"{%22name%22:%22\".concat(fieldname, \"%22,%22op%22:%22\").concat(operator, \"%22,%22val%22:%22\").concat(value, \"%22}\");\n};\n\nconst buildQuery = (model, page, filterObjs, orderObjs) => {\n  return \"https://api.howsmyair.me/\".concat(model, \"?page=\").concat(page, \"&q={%22filters%22:[\").concat(filterObjs, \"],%22order_by%22:[\").concat(orderObjs, \"]}\");\n};\n\nexport class Pollutants extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      num_results: null,\n      objects: [],\n      page: null,\n      total_pages: null,\n      states: [],\n      time_zones: [],\n      inhalation_cancer_potency: \"None\",\n      inhalation_cancer_potency_source: \"None\",\n      inhalation_cancer_potency_units: \"None\",\n      inhalation_reference_concentration: \"None\",\n      inhalation_reference_concentration_source: \"None\",\n      inhalation_reference_concentration_units: \"None\",\n      national_ambient_air_quality_std: \"None\",\n      national_ambient_air_quality_std_source: \"None\",\n      national_ambient_air_quality_std_units: \"None\",\n      cancer_potency_sources: [],\n      cancer_potency_units: [],\n      reference_concentration_source: [],\n      reference_concentration_units: [],\n      ambient_air_quality_std_source: [],\n      ambient_air_quality_std_units: [],\n      sort_by: \"chemical_name\",\n      display_sort: \"Chemical Name\",\n      order: \"asc\",\n      display_order: \"Ascending\",\n      curent_page: 0,\n      isloaded: false\n    };\n    this.getQuery = this.getQuery.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.getQuery());\n    fetch(this.getQuery()).then(res => res.json()).then(data => {\n      this.setState({\n        data: data,\n        num_results: data.num_results,\n        objects: data.objects,\n        curent_page: data.page - 1,\n        page: data.page - 1,\n        total_pages: data.total_pages,\n        cancer_potency_sources: this.getcancer_potency_source(data.objects),\n        cancer_potency_units: this.getcancer_potency_units(data.objects),\n        reference_concentration_source: this.getreference_concentration_source(data.objects),\n        reference_concentration_units: this.getreference_concentration_units(data.objects),\n        ambient_air_quality_std_source: this.getair_quality_std_source(data.objects),\n        ambient_air_quality_std_units: this.getair_quality_std_units(data.objects),\n        isloaded: true\n      });\n    });\n  }\n\n  getcancer_potency_source(objArray) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj.inhalation_cancer_potency_source) === -1) {\n        uniqueVals.push(obj.inhalation_cancer_potency_source);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getcancer_potency_units(objArray) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj.inhalation_cancer_potency_units) === -1) {\n        uniqueVals.push(obj.inhalation_cancer_potency_units);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getreference_concentration_source(objArray) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj.inhalation_reference_concentration_source) === -1) {\n        uniqueVals.push(obj.inhalation_reference_concentration_source);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getreference_concentration_units(objArray) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj.inhalation_reference_concentration_units) === -1) {\n        uniqueVals.push(obj.inhalation_reference_concentration_units);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getair_quality_std_source(objArray) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj.national_ambient_air_quality_std_source) === -1) {\n        uniqueVals.push(obj.national_ambient_air_quality_std_source);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getair_quality_std_units(objArray) {\n    const uniqueVals = [];\n    objArray.map(obj => {\n      if (uniqueVals.indexOf(obj.national_ambient_air_quality_std_units) === -1) {\n        uniqueVals.push(obj.national_ambient_air_quality_std_units);\n      }\n\n      ;\n    });\n    return uniqueVals;\n  }\n\n  getQuery() {\n    let filterObjs = buildFilter(\"chemical_name\", \"like\", \"%25%25\");\n    let orderObjs = buildOrder(\"chemical_name\", \"asc\");\n\n    if (this.state.inhalation_cancer_potency_source != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_cancer_potency_source\", \"eq\", this.state.inhalation_cancer_potency_source);\n    }\n\n    if (this.state.inhalation_cancer_potency_units != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_cancer_potency_units\", \"eq\", this.state.inhalation_cancer_potency_units);\n    }\n\n    if (this.state.inhalation_reference_concentration_source != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_reference_concentration_source\", \"eq\", this.state.inhalation_reference_concentration_source);\n    }\n\n    if (this.state.inhalation_reference_concentration_units != \"None\") {\n      filterObjs += \",\" + buildFilter(\"inhalation_reference_concentration_units\", \"eq\", this.state.inhalation_reference_concentration_units);\n    }\n\n    if (this.state.national_ambient_air_quality_std_source != \"None\") {\n      filterObjs += \",\" + buildFilter(\"national_ambient_air_quality_std_source\", \"eq\", this.state.national_ambient_air_quality_std_source);\n    }\n\n    if (this.state.national_ambient_air_quality_std_units != \"None\") {\n      filterObjs += \",\" + buildFilter(\"national_ambient_air_quality_std_units\", \"eq\", this.state.national_ambient_air_quality_std_units);\n    }\n\n    orderObjs = buildOrder(this.state.sort_by, this.state.order);\n    return buildQuery(\"pollutants\", this.state.curent_page + 1, filterObjs, orderObjs);\n  }\n\n  render() {\n    if (this.state.isloaded) {\n      console.log(this.state.curent_page);\n      console.log(this.state.page);\n      console.log(this.state.total_pages);\n      console.log(this.state.num_results);\n      let span = 4;\n      let page = this.state.page;\n      let end = this.state.total_pages - 1;\n      let l = page - span / 2;\n      let r = page + span / 2;\n      let inbetween = [];\n\n      if (this.state.total_pages < span + 1) {\n        for (let p = 0; p < this.state.total_pages; p++) {\n          inbetween.push(React.createElement(Pagination.Item, {\n            active: p === page,\n            onClick: e => this.setState({\n              curent_page: p,\n              isloaded: false\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 281\n            },\n            __self: this\n          }, p + 1));\n        }\n      } else if (page - span < 0) {\n        for (let p = 0; p <= span; p++) {\n          inbetween.push(React.createElement(Pagination.Item, {\n            active: p === page,\n            onClick: e => this.setState({\n              curent_page: p,\n              isloaded: false\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292\n            },\n            __self: this\n          }, p + 1));\n        }\n      } else if (page + span > end) {\n        for (let p = end - span; p <= end; p++) {\n          inbetween.push(React.createElement(Pagination.Item, {\n            active: p === page,\n            onClick: e => this.setState({\n              curent_page: p,\n              isloaded: false\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303\n            },\n            __self: this\n          }, p + 1));\n        }\n      } else {\n        for (let p = l < 0 ? 0 : l; p <= r && p <= end; p++) {\n          inbetween.push(React.createElement(Pagination.Item, {\n            active: p === page,\n            onClick: e => this.setState({\n              curent_page: p,\n              isloaded: false\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 314\n            },\n            __self: this\n          }, p + 1));\n        }\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }), React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, this.state.num_results, \" Checmial Pollutants\")), React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, \"Filters\")), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Potency Source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_source: \"None\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"None\"), this.state.cancer_potency_sources.map(src => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_source: src,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, src))))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Potency Units\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_units: \"None\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, \"None\"), this.state.cancer_potency_units.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_cancer_potency_units: unit,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, unit))))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Concentration Source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_source: \"None\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, \"None\"), this.state.reference_concentration_source.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_source: unit,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, unit))))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Concentration Units\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_units: \"None\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, \"None\"), this.state.reference_concentration_units.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            inhalation_reference_concentration_units: unit,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, unit))))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Air Quality Source\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_source: \"None\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, \"None\"), this.state.ambient_air_quality_std_source.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_source: unit,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, unit))))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Air Quality Units\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_units: \"None\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \"None\"), this.state.ambient_air_quality_std_units.map(unit => React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            national_ambient_air_quality_std_units: unit,\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, unit))))), React.createElement(\"h3\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }, \"Sort By\")), \"cancer_potency_sources : [], cancer_potency_units : [], reference_concentration_source : [], reference_concentration_units : [], ambient_air_quality_std_source : [], ambient_air_quality_std_units : [], inhalation_cancer_potency : \\\"None\\\", inhalation_cancer_potency_source : \\\"None\\\", inhalation_cancer_potency_units : \\\"None\\\", inhalation_reference_concentration : \\\"None\\\", inhalation_reference_concentration_source : \\\"None\\\", inhalation_reference_concentration_units : \\\"None\\\", national_ambient_air_quality_std : \\\"None\\\", national_ambient_air_quality_std_source : \\\"None\\\", national_ambient_air_quality_std_units : \\\"None\\\",\", React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: this.state.display_sort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"chemical_name\",\n            display_sort: \"Chemical Name\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 470\n        },\n        __self: this\n      }, \"Chemical Name\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"illness_name\",\n            display_sort: \"Illness\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473\n        },\n        __self: this\n      }, \"Potency\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"illness_lethality\",\n            display_sort: \"Lethality\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, \"Concentration\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"national_ambient_air_quality_std\",\n            display_sort: \"Standard\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, \"Standard\"))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: this.state.display_order,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            order: \"asc\",\n            display_order: \"Ascending\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }, \"Ascending\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            order: \"desc\",\n            display_order: \"Descending\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }, \"Descending\"))), React.createElement(\"h3\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, \"Sort By\")), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: this.state.display_sort,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"inhalation_cancer_potency\",\n            display_sort: \"Potency\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499\n        },\n        __self: this\n      }, \"Potency\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"inhalation_reference_concentration\",\n            display_sort: \"Concentration\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, \"Concentration\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"illness_contagious\",\n            display_sort: \"Contagious\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }, \"Standard\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            sort_by: \"illness_treatable\",\n            display_sort: \"Treatable\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      }, \"Treatable\"))), React.createElement(Col, {\n        md: \"auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }, React.createElement(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: this.state.display_order,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            order: \"asc\",\n            display_order: \"Ascending\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, \"Ascending\"), React.createElement(Dropdown.Item, {\n        onClick: () => {\n          this.setState({\n            order: \"desc\",\n            display_order: \"Descending\",\n            isloaded: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, \"Descending\")))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      }), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        style: {\n          color: '#1976d2'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526\n        },\n        __self: this\n      }, \"Page \", this.state.curent_page + 1, \"/\", this.state.total_pages)), React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        },\n        __self: this\n      }, React.createElement(Pagination, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }, React.createElement(Pagination.First, {\n        onClick: e => this.setState({\n          curent_page: 0,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }), React.createElement(Pagination.Prev, {\n        disabled: this.state.page <= 0,\n        onClick: e => this.setState({\n          curent_page: this.state.page - 1,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }), inbetween, React.createElement(Pagination.Next, {\n        disabled: this.state.page >= this.state.total_pages - 1,\n        onClick: e => this.setState({\n          curent_page: this.state.page + 1,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }), React.createElement(Pagination.Last, {\n        onClick: e => this.setState({\n          curent_page: this.state.total_pages - 1,\n          isloaded: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      })))), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"justify-content-md-center\",\n        className: \"spacing\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558\n        },\n        __self: this\n      }, this.state.objects.map(pollutant => React.createElement(Col, {\n        className: \"spacing\",\n        lg: \"4\",\n        sm: \"6\",\n        xs: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, React.createElement(Card, {\n        body: true,\n        style: {\n          backgroundColor: '#00',\n          borderColor: '#2255'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561\n        },\n        __self: this\n      }, React.createElement(CardImg, {\n        src: pollutant.chemspider_id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562\n        },\n        __self: this\n      }), React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/Pollutant/\" + pollutant.chemical_name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566\n        },\n        __self: this\n      }, pollutant.chemical_name))), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }, React.createElement(CardText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }, \"Inhalation Cancer Potency\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572\n        },\n        __self: this\n      }), \"Potency: \", pollutant.inhalation_cancer_potency, \" \", pollutant.inhalation_cancer_potency_units, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }), \"Source: \", pollutant.inhalation_cancer_potency_source, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }), React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574\n        },\n        __self: this\n      }, \"Inhalation Reference Concentration\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575\n        },\n        __self: this\n      }), \"Concentration: \", pollutant.inhalation_reference_concentration, \" \", pollutant.inhalation_reference_concentration_units, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576\n        },\n        __self: this\n      }), \"Source: \", pollutant.inhalation_reference_concentration_source, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }), React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }, \"National Ambient Air Quality Standards\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578\n        },\n        __self: this\n      }), \"Standard: \", pollutant.national_ambient_air_quality_std, \" \", pollutant.national_ambient_air_quality_std_units, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      }), \"Source: \", pollutant.national_ambient_air_quality_std_source)))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585\n        },\n        __self: this\n      }))))));\n    } else {\n      this.componentDidMount();\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596\n        },\n        __self: this\n      }, \"omae wa mou shindeiru\"));\n    }\n  }\n\n}\nexport default createUltimatePagination({\n  WrapperComponent: Pagination,\n  itemTypeToComponent: {\n    [ITEM_TYPES.PAGE]: ({\n      value,\n      isActive,\n      onClick\n    }) => React.createElement(Pagination.Item, {\n      active: isActive,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, value),\n    [ITEM_TYPES.ELLIPSIS]: ({\n      isActive,\n      onClick\n    }) => React.createElement(Pagination.Ellipsis, {\n      disabled: isActive,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610\n      },\n      __self: this\n    }),\n    [ITEM_TYPES.FIRST_PAGE_LINK]: ({\n      isActive,\n      onClick\n    }) => React.createElement(Pagination.First, {\n      disabled: isActive,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }),\n    [ITEM_TYPES.PREVIOUS_PAGE_LINK]: ({\n      isActive,\n      onClick\n    }) => React.createElement(Pagination.Prev, {\n      disabled: isActive,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }),\n    [ITEM_TYPES.NEXT_PAGE_LINK]: ({\n      isActive,\n      onClick\n    }) => React.createElement(Pagination.Next, {\n      disabled: isActive,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    }),\n    [ITEM_TYPES.LAST_PAGE_LINK]: ({\n      isActive,\n      onClick\n    }) => React.createElement(Pagination.Last, {\n      disabled: isActive,\n      onClick: onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622\n      },\n      __self: this\n    })\n  }\n});","map":{"version":3,"sources":["/Users/jasonlihuang/Documents/cs373-airpollution/frontend/src/pages/pollutants/Pollutants.js"],"names":["React","Component","Jumbotron","Container","Card","Button","CardImg","CardTitle","CardText","CardHeader","CardDeck","CardColumns","CardSubtitle","CardBody","NavLink","UncontrolledCarousel","Form","FormGroup","Label","Input","FormText","Image","Col","Row","Pagination","DropdownButton","Dropdown","ButtonToolbar","BrowserRouter","Router","Route","Link","Switch","BrowserHistory","createBrowserHistory","createUltimatePagination","ITEM_TYPES","ReactDOM","Illnesses","IllnessInstance","Locations","Location","LocationInstance","ENDPOINT","Pollutant","constructor","props","state","data","related_illnesses","related_locations","componentDidMount","key","match","params","fetch","then","res","json","setState","render","chemical_name","inhalation_cancer_potency","inhalation_cancer_potency_units","inhalation_cancer_potency_source","inhalation_reference_concentration","inhalation_reference_concentration_units","inhalation_reference_concentration_source","national_ambient_air_quality_std","national_ambient_air_quality_std_units","national_ambient_air_quality_std_source","chemspider_id","map","illness","illness_name","location","location_id","buildOrder","fieldname","direction","buildFilter","operator","value","buildQuery","model","page","filterObjs","orderObjs","Pollutants","num_results","objects","total_pages","states","time_zones","cancer_potency_sources","cancer_potency_units","reference_concentration_source","reference_concentration_units","ambient_air_quality_std_source","ambient_air_quality_std_units","sort_by","display_sort","order","display_order","curent_page","isloaded","getQuery","bind","console","log","getcancer_potency_source","getcancer_potency_units","getreference_concentration_source","getreference_concentration_units","getair_quality_std_source","getair_quality_std_units","objArray","uniqueVals","obj","indexOf","push","span","end","l","r","inbetween","p","e","color","src","unit","pollutant","backgroundColor","borderColor","WrapperComponent","itemTypeToComponent","PAGE","isActive","onClick","ELLIPSIS","FIRST_PAGE_LINK","PREVIOUS_PAGE_LINK","NEXT_PAGE_LINK","LAST_PAGE_LINK"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,kCAAP;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,OAA7C,EAAsDC,SAAtD,EAAiEC,QAAjE,EAA2EC,UAA3E,EACSC,QADT,EACmBC,WADnB,EACgCC,YADhC,EAC8CC,QAD9C,EACyDC,OADzD,EACkEC,oBADlE,EAESC,IAFT,EAEcC,SAFd,EAEyBC,KAFzB,EAEgCC,KAFhC,EAEuCC,QAFvC,QAEsD,YAFtD;AAGA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsCC,cAAtC,EAAsDC,QAAtD,EAAgEC,aAAhE,QAAqF,iBAArF;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,IAAzC,EAAgDC,MAAhD,EAAuDC,cAAvD,QAA6E,kBAA7E;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,wBAAT,EAAmCC,UAAnC,QAAqD,2BAArD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,wBAApC;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA;;;;;;;;;AASA,MAAMC,QAAQ,GAAG,qCAAjB;AAEA,OAAO,MAAMC,SAAN,SAAwB3C,SAAxB,CAAkC;AAErC4C,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,iBAAiB,EAAE,EAFR;AAGXC,MAAAA,iBAAiB,EAAE;AAHR,KAAb;AAKD;;AAEFC,EAAAA,iBAAiB,GAAG;AAAA,UACVC,GADU,GACH,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MADd,CACVF,GADU,EAEjB;;AACAG,IAAAA,KAAK,CAACZ,QAAQ,GAAG,GAAX,GAAiBS,GAAlB,CAAL,CACII,IADJ,CACSC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADhB,EAEIF,IAFJ,CAESR,IAAI,IAAI;AAAE,WAAKW,QAAL,CAAc;AAC3BX,QAAAA,IAAI,EAAEA,IADqB;AAE3BC,QAAAA,iBAAiB,EAAGD,IAAI,CAACC,iBAFE;AAG3BC,QAAAA,iBAAiB,EAAGF,IAAI,CAACE;AAHE,OAAd;AAKlB,KAPD;AAQD;;AAEFU,EAAAA,MAAM,GAAG;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKb,KAAL,CAAWC,IAAX,CAAgBa,aAArB,CAFA,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHA,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAJA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,eAKe,KAAKd,KAAL,CAAWC,IAAX,CAAgBc,yBAL/B,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,aAMa,KAAKf,KAAL,CAAWC,IAAX,CAAgBe,+BAN7B,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPA,cAOc,KAAKhB,KAAL,CAAWC,IAAX,CAAgBgB,gCAP9B,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,EAQK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CARL,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATA,qBASqB,KAAKjB,KAAL,CAAWC,IAAX,CAAgBiB,kCATrC,EAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVA,aAUa,KAAKlB,KAAL,CAAWC,IAAX,CAAgBkB,wCAV7B,EAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXA,cAWc,KAAKnB,KAAL,CAAWC,IAAX,CAAgBmB,yCAX9B,EAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,EAYK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAZL,EAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbA,gBAagB,KAAKpB,KAAL,CAAWC,IAAX,CAAgBoB,gCAbhC,EAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,aAca,KAAKrB,KAAL,CAAWC,IAAX,CAAgBqB,sCAd7B,EAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfA,cAec,KAAKtB,KAAL,CAAWC,IAAX,CAAgBsB,uCAf9B,EAgBA;AAAK,MAAA,GAAG,EAAI,KAAKvB,KAAL,CAAWC,IAAX,CAAgBuB,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,CADA,CADJ,EAsBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADA,EAEA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKxB,KAAL,CAAWE,iBAAX,CAA6BuB,GAA7B,CAAkCC,OAAD,IAChC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,eAAD;AAAiB,MAAA,YAAY,EAAEA,OAAO,CAACC,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADD,CADD,CAFA,CAtBJ,EAiCI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADA,EAEA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEC,KAAK3B,KAAL,CAAWG,iBAAX,CAA6BsB,GAA7B,CAAkCG,QAAD,IAChC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,gBAAD;AAAkB,MAAA,WAAW,EAAEA,QAAQ,CAACC,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADD,CAFD,CAFA,CAjCJ,CADF;AA+CF;;AAxEqC;;AA2EzC,MAAMC,UAAU,GAAI,CAACC,SAAD,EAAWC,SAAX,KAAyB;AACzC,mCAA0BD,SAA1B,oCAA6DC,SAA7D;AACH,CAFD;;AAIA,MAAMC,WAAW,GAAG,CAACF,SAAD,EAAWG,QAAX,EAAoBC,KAApB,KAA8B;AAC9C,kCAAyBJ,SAAzB,6BAAqDG,QAArD,8BAAiFC,KAAjF;AACH,CAFD;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAOC,IAAP,EAAYC,UAAZ,EAAuBC,SAAvB,KAAqC;AAClD,4CAAmCH,KAAnC,mBAAiDC,IAAjD,gCAA2EC,UAA3E,+BAA0GC,SAA1G;AACL,CAFD;;AAIA,OAAO,MAAMC,UAAN,SAAyBvF,SAAzB,CAAmC;AAExC4C,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAG,EADI;AAEXyC,MAAAA,WAAW,EAAE,IAFF;AAGXC,MAAAA,OAAO,EAAC,EAHG;AAIXL,MAAAA,IAAI,EAAE,IAJK;AAKXM,MAAAA,WAAW,EAAE,IALF;AAMXC,MAAAA,MAAM,EAAG,EANE;AAOXC,MAAAA,UAAU,EAAG,EAPF;AAQX/B,MAAAA,yBAAyB,EAAG,MARjB;AASXE,MAAAA,gCAAgC,EAAG,MATxB;AAUXD,MAAAA,+BAA+B,EAAG,MAVvB;AAWXE,MAAAA,kCAAkC,EAAG,MAX1B;AAYXE,MAAAA,yCAAyC,EAAG,MAZjC;AAaXD,MAAAA,wCAAwC,EAAG,MAbhC;AAcXE,MAAAA,gCAAgC,EAAG,MAdxB;AAeXE,MAAAA,uCAAuC,EAAG,MAf/B;AAgBXD,MAAAA,sCAAsC,EAAG,MAhB9B;AAiBXyB,MAAAA,sBAAsB,EAAG,EAjBd;AAkBXC,MAAAA,oBAAoB,EAAG,EAlBZ;AAmBXC,MAAAA,8BAA8B,EAAG,EAnBtB;AAoBXC,MAAAA,6BAA6B,EAAG,EApBrB;AAqBXC,MAAAA,8BAA8B,EAAG,EArBtB;AAsBXC,MAAAA,6BAA6B,EAAG,EAtBrB;AAuBXC,MAAAA,OAAO,EAAG,eAvBC;AAwBXC,MAAAA,YAAY,EAAG,eAxBJ;AAyBXC,MAAAA,KAAK,EAAG,KAzBG;AA0BXC,MAAAA,aAAa,EAAG,WA1BL;AA2BXC,MAAAA,WAAW,EAAE,CA3BF;AA4BXC,MAAAA,QAAQ,EAAG;AA5BA,KAAb;AA8BI,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKxD,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBwD,IAAvB,CAA4B,IAA5B,CAAzB;AACL;;AAECxD,EAAAA,iBAAiB,GAAG;AAClByD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,QAAL,EAAZ;AACAnD,IAAAA,KAAK,CAAC,KAAKmD,QAAL,EAAD,CAAL,CACIlD,IADJ,CACSC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADhB,EAEIF,IAFJ,CAESR,IAAI,IAAI;AACb,WAAKW,QAAL,CAAc;AACZX,QAAAA,IAAI,EAAGA,IADK;AAEZyC,QAAAA,WAAW,EAAEzC,IAAI,CAACyC,WAFN;AAGZC,QAAAA,OAAO,EAAE1C,IAAI,CAAC0C,OAHF;AAIZc,QAAAA,WAAW,EAAExD,IAAI,CAACqC,IAAL,GAAU,CAJX;AAKZA,QAAAA,IAAI,EAAErC,IAAI,CAACqC,IAAL,GAAU,CALJ;AAMZM,QAAAA,WAAW,EAAE3C,IAAI,CAAC2C,WANN;AAOZG,QAAAA,sBAAsB,EAAG,KAAKgB,wBAAL,CAA8B9D,IAAI,CAAC0C,OAAnC,CAPb;AAQZK,QAAAA,oBAAoB,EAAG,KAAKgB,uBAAL,CAA6B/D,IAAI,CAAC0C,OAAlC,CARX;AASZM,QAAAA,8BAA8B,EAAG,KAAKgB,iCAAL,CAAuChE,IAAI,CAAC0C,OAA5C,CATrB;AAUZO,QAAAA,6BAA6B,EAAG,KAAKgB,gCAAL,CAAsCjE,IAAI,CAAC0C,OAA3C,CAVpB;AAWZQ,QAAAA,8BAA8B,EAAG,KAAKgB,yBAAL,CAA+BlE,IAAI,CAAC0C,OAApC,CAXrB;AAYZS,QAAAA,6BAA6B,EAAG,KAAKgB,wBAAL,CAA8BnE,IAAI,CAAC0C,OAAnC,CAZpB;AAaZe,QAAAA,QAAQ,EAAG;AAbC,OAAd;AAgBH,KAnBD;AAoBD;;AAEDK,EAAAA,wBAAwB,CAACM,QAAD,EAAU;AAC9B,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,QAAQ,CAAC5C,GAAT,CAAc8C,GAAG,IAAI;AACjB,UAAID,UAAU,CAACE,OAAX,CAAmBD,GAAG,CAACtD,gCAAvB,MAA6D,CAAC,CAAlE,EAAqE;AACjEqD,QAAAA,UAAU,CAACG,IAAX,CAAgBF,GAAG,CAACtD,gCAApB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAOqD,UAAP;AACH;;AAEDN,EAAAA,uBAAuB,CAACK,QAAD,EAAU;AAC7B,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,QAAQ,CAAC5C,GAAT,CAAc8C,GAAG,IAAI;AACjB,UAAID,UAAU,CAACE,OAAX,CAAmBD,GAAG,CAACvD,+BAAvB,MAA4D,CAAC,CAAjE,EAAoE;AAChEsD,QAAAA,UAAU,CAACG,IAAX,CAAgBF,GAAG,CAACvD,+BAApB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAOsD,UAAP;AACH;;AAEDL,EAAAA,iCAAiC,CAACI,QAAD,EAAU;AACvC,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,QAAQ,CAAC5C,GAAT,CAAc8C,GAAG,IAAI;AACjB,UAAID,UAAU,CAACE,OAAX,CAAmBD,GAAG,CAACnD,yCAAvB,MAAsE,CAAC,CAA3E,EAA8E;AAC1EkD,QAAAA,UAAU,CAACG,IAAX,CAAgBF,GAAG,CAACnD,yCAApB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAOkD,UAAP;AACH;;AAEDJ,EAAAA,gCAAgC,CAACG,QAAD,EAAU;AACtC,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,QAAQ,CAAC5C,GAAT,CAAc8C,GAAG,IAAI;AACjB,UAAID,UAAU,CAACE,OAAX,CAAmBD,GAAG,CAACpD,wCAAvB,MAAqE,CAAC,CAA1E,EAA6E;AACzEmD,QAAAA,UAAU,CAACG,IAAX,CAAgBF,GAAG,CAACpD,wCAApB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAOmD,UAAP;AACH;;AAEDH,EAAAA,yBAAyB,CAACE,QAAD,EAAU;AAC/B,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,QAAQ,CAAC5C,GAAT,CAAc8C,GAAG,IAAI;AACjB,UAAID,UAAU,CAACE,OAAX,CAAmBD,GAAG,CAAChD,uCAAvB,MAAoE,CAAC,CAAzE,EAA4E;AACxE+C,QAAAA,UAAU,CAACG,IAAX,CAAgBF,GAAG,CAAChD,uCAApB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAO+C,UAAP;AACH;;AAEDF,EAAAA,wBAAwB,CAACC,QAAD,EAAU;AAC9B,UAAMC,UAAU,GAAG,EAAnB;AACAD,IAAAA,QAAQ,CAAC5C,GAAT,CAAc8C,GAAG,IAAI;AACjB,UAAID,UAAU,CAACE,OAAX,CAAmBD,GAAG,CAACjD,sCAAvB,MAAmE,CAAC,CAAxE,EAA2E;AACvEgD,QAAAA,UAAU,CAACG,IAAX,CAAgBF,GAAG,CAACjD,sCAApB;AACH;;AAAA;AACJ,KAJD;AAKA,WAAOgD,UAAP;AACH;;AAEDX,EAAAA,QAAQ,GAAE;AAER,QAAIpB,UAAU,GAAGN,WAAW,CAAC,eAAD,EAAiB,MAAjB,WAA5B;AACA,QAAIO,SAAS,GAAGV,UAAU,CAAC,eAAD,EAAiB,KAAjB,CAA1B;;AAEA,QAAI,KAAK9B,KAAL,CAAWiB,gCAAX,IAA+C,MAAnD,EAA2D;AACzDsB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,kCAAD,EAAoC,IAApC,EAAyC,KAAKjC,KAAL,CAAWiB,gCAApD,CAA7B;AACD;;AACD,QAAI,KAAKjB,KAAL,CAAWgB,+BAAX,IAA8C,MAAlD,EAA0D;AACxDuB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,iCAAD,EAAmC,IAAnC,EAAwC,KAAKjC,KAAL,CAAWgB,+BAAnD,CAA7B;AACD;;AACD,QAAI,KAAKhB,KAAL,CAAWoB,yCAAX,IAAwD,MAA5D,EAAoE;AAClEmB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,2CAAD,EAA6C,IAA7C,EAAkD,KAAKjC,KAAL,CAAWoB,yCAA7D,CAA7B;AACD;;AACD,QAAI,KAAKpB,KAAL,CAAWmB,wCAAX,IAAuD,MAA3D,EAAmE;AACjEoB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,0CAAD,EAA4C,IAA5C,EAAiD,KAAKjC,KAAL,CAAWmB,wCAA5D,CAA7B;AACD;;AACD,QAAI,KAAKnB,KAAL,CAAWuB,uCAAX,IAAsD,MAA1D,EAAkE;AAChEgB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,yCAAD,EAA2C,IAA3C,EAAgD,KAAKjC,KAAL,CAAWuB,uCAA3D,CAA7B;AACD;;AACD,QAAI,KAAKvB,KAAL,CAAWsB,sCAAX,IAAqD,MAAzD,EAAiE;AAC/DiB,MAAAA,UAAU,IAAI,MAAIN,WAAW,CAAC,wCAAD,EAA0C,IAA1C,EAA+C,KAAKjC,KAAL,CAAWsB,sCAA1D,CAA7B;AACD;;AAEDkB,IAAAA,SAAS,GAAGV,UAAU,CAAC,KAAK9B,KAAL,CAAWqD,OAAZ,EAAoB,KAAKrD,KAAL,CAAWuD,KAA/B,CAAtB;AAEA,WAAOnB,UAAU,CAAC,YAAD,EAAc,KAAKpC,KAAL,CAAWyD,WAAX,GAAuB,CAArC,EAAuClB,UAAvC,EAAkDC,SAAlD,CAAjB;AACD;;AAED3B,EAAAA,MAAM,GAAE;AACN,QAAI,KAAKb,KAAL,CAAW0D,QAAf,EAAwB;AACxBG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9D,KAAL,CAAWyD,WAAvB;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9D,KAAL,CAAWsC,IAAvB;AACAuB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9D,KAAL,CAAW4C,WAAvB;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9D,KAAL,CAAW0C,WAAvB;AACA,UAAIgC,IAAI,GAAG,CAAX;AACA,UAAIpC,IAAI,GAAG,KAAKtC,KAAL,CAAWsC,IAAtB;AACA,UAAIqC,GAAG,GAAG,KAAK3E,KAAL,CAAW4C,WAAX,GAAyB,CAAnC;AACA,UAAIgC,CAAC,GAAGtC,IAAI,GAAIoC,IAAI,GAAG,CAAvB;AACA,UAAIG,CAAC,GAAGvC,IAAI,GAAIoC,IAAI,GAAG,CAAvB;AACA,UAAII,SAAS,GAAG,EAAhB;;AAEA,UAAI,KAAK9E,KAAL,CAAW4C,WAAX,GAAyB8B,IAAI,GAAG,CAApC,EAAsC;AAClC,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/E,KAAL,CAAW4C,WAA/B,EAA4CmC,CAAC,EAA7C,EAAiD;AAC/CD,UAAAA,SAAS,CAACL,IAAV,CACE,oBAAC,UAAD,CAAY,IAAZ;AACE,YAAA,MAAM,EAAEM,CAAC,KAAKzC,IADhB;AAEE,YAAA,OAAO,EAAE0C,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,cAAAA,WAAW,EAAGsB,CAAhB;AAAoBrB,cAAAA,QAAQ,EAAG;AAA/B,aAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAICqB,CAAC,GAAG,CAJL,CADF;AAQD;AACJ,OAXD,MAWO,IAAIzC,IAAI,GAACoC,IAAL,GAAY,CAAhB,EAAmB;AACxB,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,IAArB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9BD,UAAAA,SAAS,CAACL,IAAV,CACE,oBAAC,UAAD,CAAY,IAAZ;AACE,YAAA,MAAM,EAAEM,CAAC,KAAKzC,IADhB;AAEE,YAAA,OAAO,EAAE0C,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,cAAAA,WAAW,EAAGsB,CAAhB;AAAoBrB,cAAAA,QAAQ,EAAG;AAA/B,aAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAICqB,CAAC,GAAG,CAJL,CADF;AAQD;AACF,OAXM,MAWA,IAAIzC,IAAI,GAAGoC,IAAP,GAAcC,GAAlB,EAAuB;AAC1B,aAAK,IAAII,CAAC,GAAGJ,GAAG,GAAGD,IAAnB,EAAyBK,CAAC,IAAIJ,GAA9B,EAAoCI,CAAC,EAArC,EAAyC;AACvCD,UAAAA,SAAS,CAACL,IAAV,CACE,oBAAC,UAAD,CAAY,IAAZ;AACE,YAAA,MAAM,EAAEM,CAAC,KAAKzC,IADhB;AAEA,YAAA,OAAO,EAAE0C,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,cAAAA,WAAW,EAAGsB,CAAhB;AAAoBrB,cAAAA,QAAQ,EAAG;AAA/B,aAAd,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAICqB,CAAC,GAAG,CAJL,CADF;AAQH;AACF,OAXM,MAWA;AACL,aAAK,IAAIA,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYA,CAAzB,EAA4BG,CAAC,IAAIF,CAAL,IAAUE,CAAC,IAAIJ,GAA3C,EAAgDI,CAAC,EAAjD,EAAqD;AACnDD,UAAAA,SAAS,CAACL,IAAV,CACE,oBAAC,UAAD,CAAY,IAAZ;AACE,YAAA,MAAM,EAAEM,CAAC,KAAKzC,IADhB;AAEE,YAAA,OAAO,EAAE0C,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,cAAAA,WAAW,EAAGsB,CAAhB;AAAoBrB,cAAAA,QAAQ,EAAG;AAA/B,aAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAICqB,CAAC,GAAG,CAJL,CADF;AAQD;AACF;;AACD,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAE;AAACE,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgC,KAAKjF,KAAL,CAAW0C,WAA3C,yBADJ,CAFJ,EAKI,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAE;AAACuC,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAIE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,gBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKrE,QAAL,CAAc;AAACK,YAAAA,gCAAgC,EAAG,MAApC;AAA2CyC,YAAAA,QAAQ,EAAG;AAAtD,WAAd;AAA6E,SAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAK1D,KAAL,CAAW+C,sBAAX,CAAkCtB,GAAlC,CAAuCyD,GAAG,IACzC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKtE,QAAL,CAAc;AACZK,YAAAA,gCAAgC,EAAGiE,GADvB;AAEZxB,YAAAA,QAAQ,EAAG;AAFC,WAAd;AAID,SALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMCwB,GAND,CADD,CAJL,CADF,CADF,CAJF,EAuBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,eAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKtE,QAAL,CAAc;AAACI,YAAAA,+BAA+B,EAAG,MAAnC;AAA0C0C,YAAAA,QAAQ,EAAG;AAArD,WAAd;AAA4E,SAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAK1D,KAAL,CAAWgD,oBAAX,CAAgCvB,GAAhC,CAAqC0D,IAAI,IACxC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKvE,QAAL,CAAc;AACZI,YAAAA,+BAA+B,EAAGmE,IADtB;AAEZzB,YAAAA,QAAQ,EAAG;AAFC,WAAd;AAID,SALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMCyB,IAND,CADD,CAJL,CADD,CADD,CAvBJ,EA0CI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,sBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKvE,QAAL,CAAc;AAACQ,YAAAA,yCAAyC,EAAG,MAA7C;AAAoDsC,YAAAA,QAAQ,EAAG;AAA/D,WAAd;AAAsF,SAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAK1D,KAAL,CAAWiD,8BAAX,CAA0CxB,GAA1C,CAA+C0D,IAAI,IAClD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKvE,QAAL,CAAc;AACZQ,YAAAA,yCAAyC,EAAG+D,IADhC;AAEZzB,YAAAA,QAAQ,EAAG;AAFC,WAAd;AAID,SALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMCyB,IAND,CADD,CAJL,CADD,CADD,CA1CJ,EA6DI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKvE,QAAL,CAAc;AAACO,YAAAA,wCAAwC,EAAG,MAA5C;AAAmDuC,YAAAA,QAAQ,EAAG;AAA9D,WAAd;AAAqF,SAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAK1D,KAAL,CAAWkD,6BAAX,CAAyCzB,GAAzC,CAA8C0D,IAAI,IACjD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKvE,QAAL,CAAc;AACZO,YAAAA,wCAAwC,EAAGgE,IAD/B;AAEZzB,YAAAA,QAAQ,EAAG;AAFC,WAAd;AAID,SALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMCyB,IAND,CADD,CAJL,CADD,CADD,CA7DJ,EAgFI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,oBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKvE,QAAL,CAAc;AAACW,YAAAA,uCAAuC,EAAG,MAA3C;AAAkDmC,YAAAA,QAAQ,EAAG;AAA7D,WAAd;AAAoF,SAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAK1D,KAAL,CAAWmD,8BAAX,CAA0C1B,GAA1C,CAA+C0D,IAAI,IAClD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKvE,QAAL,CAAc;AACZW,YAAAA,uCAAuC,EAAG4D,IAD9B;AAEZzB,YAAAA,QAAQ,EAAG;AAFC,WAAd;AAID,SALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMCyB,IAND,CADD,CAJL,CADD,CADD,CAhFJ,EAmGI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAC,mBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAKvE,QAAL,CAAc;AAACU,YAAAA,sCAAsC,EAAG,MAA1C;AAAiDoC,YAAAA,QAAQ,EAAG;AAA5D,WAAd;AAAmF,SAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAIK,KAAK1D,KAAL,CAAWoD,6BAAX,CAAyC3B,GAAzC,CAA8C0D,IAAI,IACjD,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAC5B,eAAKvE,QAAL,CAAc;AACZU,YAAAA,sCAAsC,EAAG6D,IAD7B;AAEZzB,YAAAA,QAAQ,EAAG;AAFC,WAAd;AAID,SALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMCyB,IAND,CADD,CAJL,CADD,CADD,CAnGJ,EAsHE;AAAI,QAAA,KAAK,EAAE;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/B,CAtHF,4nBA2IE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAE,KAAKjF,KAAL,CAAWsD,YAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK1C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,eAAZ;AAA6BC,YAAAA,YAAY,EAAG,eAA5C;AAA6DI,YAAAA,QAAQ,EAAG;AAAxE,WAAd;AAA+F,SAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADD,EAIC,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,cAAZ;AAA4BC,YAAAA,YAAY,EAAG,SAA3C;AAAsDI,YAAAA,QAAQ,EAAG;AAAjE,WAAd;AAAwF,SAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJD,EAOE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,mBAAZ;AAAiCC,YAAAA,YAAY,EAAG,WAAhD;AAA6DI,YAAAA,QAAQ,EAAG;AAAxE,WAAd;AAA+F,SAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAPF,EAUE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,kCAAZ;AAAgDC,YAAAA,YAAY,EAAG,UAA/D;AAA2EI,YAAAA,QAAQ,EAAG;AAAtF,WAAd;AAA6G,SAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF,CADJ,CA3IF,EA2JE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAI,KAAK1D,KAAL,CAAWwD,aAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK5C,QAAL,CAAc;AAAE2C,YAAAA,KAAK,EAAG,KAAV;AAAiBC,YAAAA,aAAa,EAAG,WAAjC;AAA8CE,YAAAA,QAAQ,EAAG;AAAzD,WAAd;AAAgF,SAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAE2C,YAAAA,KAAK,EAAG,MAAV;AAAkBC,YAAAA,aAAa,EAAG,YAAlC;AAAgDE,YAAAA,QAAQ,EAAG;AAA3D,WAAd;AAAkF,SAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADJ,CA3JF,EAuKE;AAAI,QAAA,KAAK,EAAE;AAACuB,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/B,CAvKF,EAwKE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAE,KAAKjF,KAAL,CAAWsD,YAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK1C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,2BAAZ;AAAyCC,YAAAA,YAAY,EAAG,SAAxD;AAAmEI,YAAAA,QAAQ,EAAG;AAA9E,WAAd;AAAqG,SAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,oCAAZ;AAAkDC,YAAAA,YAAY,EAAG,eAAjE;AAAkFI,YAAAA,QAAQ,EAAG;AAA7F,WAAd;AAAoH,SAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF,EAOE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,oBAAZ;AAAkCC,YAAAA,YAAY,EAAG,YAAjD;AAA+DI,YAAAA,QAAQ,EAAG;AAA1E,WAAd;AAAiG,SAAhI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF,EAUE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAEyC,YAAAA,OAAO,EAAG,mBAAZ;AAAiCC,YAAAA,YAAY,EAAG,WAAhD;AAA6DI,YAAAA,QAAQ,EAAG;AAAxE,WAAd;AAA+F,SAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAVF,CADJ,CAxKF,EAwLE,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,cAAD;AAAgB,QAAA,EAAE,EAAC,uBAAnB;AAA2C,QAAA,KAAK,EAAI,KAAK1D,KAAL,CAAWwD,aAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK5C,QAAL,CAAc;AAAE2C,YAAAA,KAAK,EAAG,KAAV;AAAiBC,YAAAA,aAAa,EAAG,WAAjC;AAA8CE,YAAAA,QAAQ,EAAG;AAAzD,WAAd;AAAgF,SAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,OAAO,EAAE,MAAM;AAAC,eAAK9C,QAAL,CAAc;AAAE2C,YAAAA,KAAK,EAAG,MAAV;AAAkBC,YAAAA,aAAa,EAAG,YAAlC;AAAgDE,YAAAA,QAAQ,EAAG;AAA3D,WAAd;AAAkF,SAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,CADJ,CAxLF,CALJ,EAwME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxMF,EAyME,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ;AAAI,QAAA,KAAK,EAAE;AAACuB,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqC,KAAKjF,KAAL,CAAWyD,WAAX,GAAuB,CAA5D,OAAgE,KAAKzD,KAAL,CAAW4C,WAA3E,CAAR,CADF,EAEE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,UAAD,CAAY,KAAZ;AACE,QAAA,OAAO,EAAEoC,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,UAAAA,WAAW,EAAG,CAAhB;AAAmBC,UAAAA,QAAQ,EAAG;AAA9B,SAAd,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAOE,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWsC,IAAX,IAAmB,CAD/B;AAEE,QAAA,OAAO,EAAE0C,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,UAAAA,WAAW,EAAG,KAAKzD,KAAL,CAAWsC,IAAX,GAAiB,CAAjC;AAAqCoB,UAAAA,QAAQ,EAAG;AAAhD,SAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAaGoB,SAbH,EAgBE,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,QAAQ,EAAE,KAAK9E,KAAL,CAAWsC,IAAX,IAAmB,KAAKtC,KAAL,CAAW4C,WAAX,GAAyB,CADxD;AAEE,QAAA,OAAO,EAAEoC,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,UAAAA,WAAW,EAAG,KAAKzD,KAAL,CAAWsC,IAAX,GAAiB,CAAjC;AAAqCoB,UAAAA,QAAQ,EAAG;AAAhD,SAAd,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBF,EAsBE,oBAAC,UAAD,CAAY,IAAZ;AACE,QAAA,OAAO,EAAEsB,CAAC,IAAI,KAAKpE,QAAL,CAAc;AAAE6C,UAAAA,WAAW,EAAG,KAAKzD,KAAL,CAAW4C,WAAX,GAAyB,CAAzC;AAA6Cc,UAAAA,QAAQ,EAAG;AAAxD,SAAd,CADhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBF,CADF,CAFF,CAzMF,EAwOI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,2BAAf;AAA2C,QAAA,SAAS,EAAC,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAK1D,KAAL,CAAW2C,OAAX,CAAmBlB,GAAnB,CAAwB2D,SAAD,IACrB,oBAAC,GAAD;AAAK,QAAA,SAAS,EAAC,SAAf;AAAyB,QAAA,EAAE,EAAC,GAA5B;AAAgC,QAAA,EAAE,EAAC,GAAnC;AAAuC,QAAA,EAAE,EAAC,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE,KAAnB;AAA0BC,UAAAA,WAAW,EAAE;AAAvC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAIF,SAAS,CAAC5D,aAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAE,gBAAgB4D,SAAS,CAACtE,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoDsE,SAAS,CAACtE,aAA9D,CAAJ,CAHF,CAFF,EAOE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,eAEesE,SAAS,CAACrE,yBAFzB,OAEqDqE,SAAS,CAACpE,+BAF/D,EAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,cAGcoE,SAAS,CAACnE,gCAHxB,EAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJA,EAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAJL,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALA,qBAKqBmE,SAAS,CAAClE,kCAL/B,OAKoEkE,SAAS,CAACjE,wCAL9E,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANA,cAMciE,SAAS,CAAChE,yCANxB,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPA,EAOK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAPL,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARA,gBAQgBgE,SAAS,CAAC/D,gCAR1B,OAQ6D+D,SAAS,CAAC9D,sCARvE,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATA,cASc8D,SAAS,CAAC7D,uCATxB,CADF,CADA,CAPF,CADA,EAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBA,CADF,CADD,CAFF,CAxOJ,CADF;AA6QD,KAtUC,MAsUK;AACL,WAAKnB,iBAAL;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADD,CADF;AAKF;AACD;;AAteuC;AAye1C,eAAehB,wBAAwB,CAAC;AACtCmG,EAAAA,gBAAgB,EAAE9G,UADoB;AAEtC+G,EAAAA,mBAAmB,EAAE;AACnB,KAACnG,UAAU,CAACoG,IAAZ,GAAmB,CAAC;AAACtD,MAAAA,KAAD;AAAQuD,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KAAD,KACjB,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,MAAM,EAAED,QAAzB;AAAmC,MAAA,OAAO,EAAEC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsDxD,KAAtD,CAFiB;AAInB,KAAC9C,UAAU,CAACuG,QAAZ,GAAuB,CAAC;AAAEF,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KACrB,oBAAC,UAAD,CAAY,QAAZ;AAAqB,MAAA,QAAQ,EAAED,QAA/B;AAAyC,MAAA,OAAO,EAAEC,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALiB;AAOnB,KAACtG,UAAU,CAACwG,eAAZ,GAA8B,CAAC;AAAEH,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KAC5B,oBAAC,UAAD,CAAY,KAAZ;AAAkB,MAAA,QAAQ,EAAED,QAA5B;AAAsC,MAAA,OAAO,EAAEC,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARiB;AAUnB,KAACtG,UAAU,CAACyG,kBAAZ,GAAiC,CAAC;AAAEJ,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KAC/B,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,QAAQ,EAAED,QAA3B;AAAqC,MAAA,OAAO,EAAEC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXiB;AAanB,KAACtG,UAAU,CAAC0G,cAAZ,GAA6B,CAAC;AAAEL,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KAC3B,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,QAAQ,EAAED,QAA3B;AAAqC,MAAA,OAAO,EAAEC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdiB;AAgBnB,KAACtG,UAAU,CAAC2G,cAAZ,GAA6B,CAAC;AAAEN,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,KAC3B,oBAAC,UAAD,CAAY,IAAZ;AAAiB,MAAA,QAAQ,EAAED,QAA3B;AAAqC,MAAA,OAAO,EAAEC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBiB;AAFiB,CAAD,CAAvC","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Jumbotron, Container, Card, Button, CardImg, CardTitle, CardText, CardHeader,\n         CardDeck, CardColumns, CardSubtitle, CardBody , NavLink, UncontrolledCarousel,\n         Form,FormGroup, Label, Input, FormText} from 'reactstrap';\nimport { Image, Col, Row, Pagination, DropdownButton, Dropdown, ButtonToolbar } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route, Link , Switch,BrowserHistory } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { createUltimatePagination, ITEM_TYPES } from 'react-ultimate-pagination';\nimport ReactDOM from 'react-dom';\nimport Illnesses from '../illnesses/Illnesses';\nimport IllnessInstance from '../illnesses/IllnessInstance';\nimport { Locations, Location } from '../locations/Locations';\nimport LocationInstance from '../locations/LocationInstance';\n\n/**\nSources:\n\nPagination sources:\nhttps://github.com/react-bootstrap/pagination\nhttps://www.npmjs.com/package/react-ultimate-pagination\nhttps://codepen.io/joedazza/pen/BVXVej\n**/\n\nconst ENDPOINT = 'https://api.howsmyair.me/pollutants';\n\nexport class Pollutant extends Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {},\n        related_illnesses: [],\n        related_locations: []\n      };\n    }\n\n   componentDidMount() {\n      const {key} = this.props.match.params;\n      // get location\n      fetch(ENDPOINT + '/' + key)\n         .then(res => res.json())\n         .then(data => { this.setState({\n            data: data,\n            related_illnesses : data.related_illnesses,\n            related_locations : data.related_locations\n         })\n      })\n    };\n\n   render() {\n      return (\n        <div>\n            <Container>\n            <p>\n            <br/>\n            <h1>{this.state.data.chemical_name}</h1>\n            <br/>\n            <b>Inhalation Cancer Potency</b>\n            <br/>Potency: {this.state.data.inhalation_cancer_potency}\n            <br/>Units: {this.state.data.inhalation_cancer_potency_units}\n            <br/>Source: {this.state.data.inhalation_cancer_potency_source}\n            <br/><b>Inhalation Reference Concentration</b>\n            <br/>Concentration: {this.state.data.inhalation_reference_concentration}\n            <br/>Units: {this.state.data.inhalation_reference_concentration_units}\n            <br/>Source: {this.state.data.inhalation_reference_concentration_source}\n            <br/><b>National Ambient Air Quality Standards</b>\n            <br/>Standard: {this.state.data.national_ambient_air_quality_std}\n            <br/>Units: {this.state.data.national_ambient_air_quality_std_units}\n            <br/>Source: {this.state.data.national_ambient_air_quality_std_source}\n            <img src = {this.state.data.chemspider_id}/>\n            </p>\n            </Container>\n            {/*related locations*/}\n            <Container>\n            <h6>Related Illnesses</h6>\n            <Jumbotron>\n            {this.state.related_illnesses.map((illness) => (\n              <CardColumns>\n                  <IllnessInstance illness_name={illness.illness_name} />\n              </CardColumns>\n            ))}\n            </Jumbotron>\n            </Container>\n            {/*related pollutants*/}\n            <Container>\n            <h6>Related Locations</h6>\n            <Jumbotron>\n\n            {this.state.related_locations.map((location) => (\n              <CardColumns>\n                  <LocationInstance location_id={location.location_id} />\n              </CardColumns>\n            ))}\n            </Jumbotron>\n            </Container>\n        </div>\n      );\n   }\n}\n\nconst buildOrder  = (fieldname,direction) => {\n    return `{%22field%22:%22${fieldname}%22,%22direction%22:%22${direction}%22}`\n}\n\nconst buildFilter = (fieldname,operator,value) => {\n    return `{%22name%22:%22${fieldname}%22,%22op%22:%22${operator}%22,%22val%22:%22${value}%22}`\n}\n\nconst buildQuery = (model,page,filterObjs,orderObjs) => {\n      return `https://api.howsmyair.me/${model}?page=${page}&q={%22filters%22:[${filterObjs}],%22order_by%22:[${orderObjs}]}`\n}\n\nexport class Pollutants extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      data : {},\n      num_results: null,\n      objects:[],\n      page: null,\n      total_pages: null,\n      states : [],\n      time_zones : [],\n      inhalation_cancer_potency : \"None\",\n      inhalation_cancer_potency_source : \"None\",\n      inhalation_cancer_potency_units : \"None\",\n      inhalation_reference_concentration : \"None\",\n      inhalation_reference_concentration_source : \"None\",\n      inhalation_reference_concentration_units : \"None\",\n      national_ambient_air_quality_std : \"None\",\n      national_ambient_air_quality_std_source : \"None\",\n      national_ambient_air_quality_std_units : \"None\",\n      cancer_potency_sources : [],\n      cancer_potency_units : [],\n      reference_concentration_source : [],\n      reference_concentration_units : [],\n      ambient_air_quality_std_source : [],\n      ambient_air_quality_std_units : [],\n      sort_by : \"chemical_name\",\n      display_sort : \"Chemical Name\",\n      order : \"asc\",\n      display_order : \"Ascending\",\n      curent_page: 0,\n      isloaded : false,\n    };\n        this.getQuery = this.getQuery.bind(this)\n        this.componentDidMount = this.componentDidMount.bind(this)\n  }\n\n    componentDidMount() {\n      console.log(this.getQuery())\n      fetch(this.getQuery())\n         .then(res => res.json())\n         .then(data => {\n          this.setState({\n            data : data,\n            num_results: data.num_results,\n            objects: data.objects,\n            curent_page: data.page-1,\n            page: data.page-1,\n            total_pages: data.total_pages,\n            cancer_potency_sources : this.getcancer_potency_source(data.objects),\n            cancer_potency_units : this.getcancer_potency_units(data.objects),\n            reference_concentration_source : this.getreference_concentration_source(data.objects),\n            reference_concentration_units : this.getreference_concentration_units(data.objects),\n            ambient_air_quality_std_source : this.getair_quality_std_source(data.objects),\n            ambient_air_quality_std_units : this.getair_quality_std_units(data.objects),\n            isloaded : true,\n          })\n\n      })\n    };\n\n    getcancer_potency_source(objArray){\n        const uniqueVals = [];\n        objArray.map( obj => {\n            if (uniqueVals.indexOf(obj.inhalation_cancer_potency_source) === -1) {\n                uniqueVals.push(obj.inhalation_cancer_potency_source)\n            };\n        });\n        return(uniqueVals);\n    }\n\n    getcancer_potency_units(objArray){\n        const uniqueVals = [];\n        objArray.map( obj => {\n            if (uniqueVals.indexOf(obj.inhalation_cancer_potency_units) === -1) {\n                uniqueVals.push(obj.inhalation_cancer_potency_units)\n            };\n        });\n        return(uniqueVals);\n    }\n\n    getreference_concentration_source(objArray){\n        const uniqueVals = [];\n        objArray.map( obj => {\n            if (uniqueVals.indexOf(obj.inhalation_reference_concentration_source) === -1) {\n                uniqueVals.push(obj.inhalation_reference_concentration_source)\n            };\n        });\n        return(uniqueVals);\n    }\n\n    getreference_concentration_units(objArray){\n        const uniqueVals = [];\n        objArray.map( obj => {\n            if (uniqueVals.indexOf(obj.inhalation_reference_concentration_units) === -1) {\n                uniqueVals.push(obj.inhalation_reference_concentration_units)\n            };\n        });\n        return(uniqueVals);\n    }\n\n    getair_quality_std_source(objArray){\n        const uniqueVals = [];\n        objArray.map( obj => {\n            if (uniqueVals.indexOf(obj.national_ambient_air_quality_std_source) === -1) {\n                uniqueVals.push(obj.national_ambient_air_quality_std_source)\n            };\n        });\n        return(uniqueVals);\n    }\n\n    getair_quality_std_units(objArray){\n        const uniqueVals = [];\n        objArray.map( obj => {\n            if (uniqueVals.indexOf(obj.national_ambient_air_quality_std_units) === -1) {\n                uniqueVals.push(obj.national_ambient_air_quality_std_units)\n            };\n        });\n        return(uniqueVals);\n    }\n\n    getQuery(){\n\n      let filterObjs = buildFilter(\"chemical_name\",\"like\",`%25%25`);\n      let orderObjs = buildOrder(\"chemical_name\",\"asc\")\n\n      if (this.state.inhalation_cancer_potency_source != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_cancer_potency_source\",\"eq\",this.state.inhalation_cancer_potency_source)\n      }\n      if (this.state.inhalation_cancer_potency_units != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_cancer_potency_units\",\"eq\",this.state.inhalation_cancer_potency_units)\n      }\n      if (this.state.inhalation_reference_concentration_source != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_reference_concentration_source\",\"eq\",this.state.inhalation_reference_concentration_source)\n      }\n      if (this.state.inhalation_reference_concentration_units != \"None\") {\n        filterObjs += \",\"+buildFilter(\"inhalation_reference_concentration_units\",\"eq\",this.state.inhalation_reference_concentration_units)\n      }\n      if (this.state.national_ambient_air_quality_std_source != \"None\") {\n        filterObjs += \",\"+buildFilter(\"national_ambient_air_quality_std_source\",\"eq\",this.state.national_ambient_air_quality_std_source)\n      }\n      if (this.state.national_ambient_air_quality_std_units != \"None\") {\n        filterObjs += \",\"+buildFilter(\"national_ambient_air_quality_std_units\",\"eq\",this.state.national_ambient_air_quality_std_units)\n      }\n\n      orderObjs = buildOrder(this.state.sort_by,this.state.order)\n\n      return buildQuery(\"pollutants\",this.state.curent_page+1,filterObjs,orderObjs);\n    }\n\n    render(){\n      if (this.state.isloaded){\n      console.log(this.state.curent_page)\n      console.log(this.state.page)\n      console.log(this.state.total_pages)\n      console.log(this.state.num_results)\n      let span = 4\n      let page = this.state.page\n      let end = this.state.total_pages - 1\n      let l = page - (span / 2)\n      let r = page + (span / 2)\n      let inbetween = [];\n\n      if (this.state.total_pages < span + 1){\n          for (let p = 0; p < this.state.total_pages; p++) {\n            inbetween.push(\n              <Pagination.Item\n                active={p === page}\n                onClick={e => this.setState({ curent_page : p , isloaded : false})}\n              >\n              {p + 1}\n              </Pagination.Item>\n            );\n          }\n      } else if (page-span < 0) {\n        for (let p = 0; p <= span; p++) {\n          inbetween.push(\n            <Pagination.Item\n              active={p === page}\n              onClick={e => this.setState({ curent_page : p , isloaded : false})}\n            >\n            {p + 1}\n            </Pagination.Item>\n          );\n        }\n      } else if (page + span > end) {\n          for (let p = end - span; p <= end ; p++) {\n            inbetween.push(\n              <Pagination.Item\n                active={p === page}\n              onClick={e => this.setState({ curent_page : p , isloaded : false})}\n              >\n              {p + 1}\n              </Pagination.Item>\n          );\n        }\n      } else {\n        for (let p = l < 0 ? 0 : l; p <= r && p <= end; p++) {\n          inbetween.push(\n            <Pagination.Item\n              active={p === page}\n              onClick={e => this.setState({ curent_page : p , isloaded : false})}\n            >\n            {p + 1}\n            </Pagination.Item>\n          );\n        }\n      }\n      return(\n        <div>\n          <br/>\n            <Row className=\"justify-content-md-center\">\n                <h1 style={{color: '#1976d2'}}>{this.state.num_results} Checmial Pollutants</h1>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n              <Col md=\"auto\">\n                <h3 style={{color: '#1976d2'}}>Filters</h3>\n              </Col>\n              <Col md=\"auto\">\n                <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Potency Source\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_cancer_potency_source : \"None\",isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.cancer_potency_sources.map( src => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_cancer_potency_source : src,\n                            isloaded : false\n                          });\n                        }}>\n                        {src}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Potency Units\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_cancer_potency_units : \"None\",isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.cancer_potency_units.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_cancer_potency_units : unit,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Concentration Source\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_reference_concentration_source : \"None\",isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.reference_concentration_source.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_reference_concentration_source : unit,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Concentration Units\">\n                      <Dropdown.Item onClick={() => {this.setState({inhalation_reference_concentration_units : \"None\",isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.reference_concentration_units.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            inhalation_reference_concentration_units : unit,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Air Quality Source\">\n                      <Dropdown.Item onClick={() => {this.setState({national_ambient_air_quality_std_source : \"None\",isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.ambient_air_quality_std_source.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            national_ambient_air_quality_std_source : unit,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  </center>\n                </Col>\n                <Col md=\"auto\">\n                 <center>\n                  <DropdownButton id=\"dropdown-basic-button\" title=\"Air Quality Units\">\n                      <Dropdown.Item onClick={() => {this.setState({national_ambient_air_quality_std_units : \"None\",isloaded : false});}}>\n                        None\n                      </Dropdown.Item>\n                      {this.state.ambient_air_quality_std_units.map( unit => (\n                        <Dropdown.Item onClick={() => {\n                          this.setState({\n                            national_ambient_air_quality_std_units : unit,\n                            isloaded : false\n                          });\n                        }}>\n                        {unit}\n                        </Dropdown.Item>\n                      ))}\n                  </DropdownButton>\n                  </center>\n                </Col>\n              <h3 style={{color: '#1976d2'}}><center>Sort By</center></h3>\n\n      cancer_potency_sources : [],\n      cancer_potency_units : [],\n      reference_concentration_source : [],\n      reference_concentration_units : [],\n      ambient_air_quality_std_source : [],\n      ambient_air_quality_std_units : [],\n\n\n      inhalation_cancer_potency : \"None\",\n      inhalation_cancer_potency_source : \"None\",\n      inhalation_cancer_potency_units : \"None\",\n      inhalation_reference_concentration : \"None\",\n      inhalation_reference_concentration_source : \"None\",\n      inhalation_reference_concentration_units : \"None\",\n      national_ambient_air_quality_std : \"None\",\n      national_ambient_air_quality_std_source : \"None\",\n      national_ambient_air_quality_std_units : \"None\",\n\n\n              <Col md=\"auto\">\n                  <DropdownButton id=\"dropdown-basic-button\" title={this.state.display_sort}>\n                   <Dropdown.Item onClick={() => {this.setState({ sort_by : \"chemical_name\", display_sort : \"Chemical Name\", isloaded : false});}}>\n                      Chemical Name\n                   </Dropdown.Item>\n                   <Dropdown.Item onClick={() => {this.setState({ sort_by : \"illness_name\", display_sort : \"Illness\", isloaded : false});}}>\n                      Potency\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"illness_lethality\", display_sort : \"Lethality\", isloaded : false});}}>\n                      Concentration\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"national_ambient_air_quality_std\", display_sort : \"Standard\", isloaded : false});}}>\n                      Standard\n                    </Dropdown.Item>\n                  </DropdownButton>\n              </Col>\n              <Col md=\"auto\">\n                  <DropdownButton id=\"dropdown-basic-button\" title = {this.state.display_order}>\n                    <Dropdown.Item onClick={() => {this.setState({ order : \"asc\", display_order : \"Ascending\", isloaded : false});}}>\n                      Ascending\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ order : \"desc\", display_order : \"Descending\", isloaded : false});}}>\n                      Descending\n                    </Dropdown.Item>\n                  </DropdownButton>\n              </Col>\n\n\n              <h3 style={{color: '#1976d2'}}><center>Sort By</center></h3>\n              <Col md=\"auto\">\n                  <DropdownButton id=\"dropdown-basic-button\" title={this.state.display_sort}>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"inhalation_cancer_potency\", display_sort : \"Potency\", isloaded : false});}}>\n                      Potency\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"inhalation_reference_concentration\", display_sort : \"Concentration\", isloaded : false});}}>\n                      Concentration\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"illness_contagious\", display_sort : \"Contagious\", isloaded : false});}}>\n                      Standard\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ sort_by : \"illness_treatable\", display_sort : \"Treatable\", isloaded : false});}}>\n                      Treatable\n                    </Dropdown.Item>\n                  </DropdownButton>\n              </Col>\n              <Col md=\"auto\">\n                  <DropdownButton id=\"dropdown-basic-button\" title = {this.state.display_order}>\n                    <Dropdown.Item onClick={() => {this.setState({ order : \"asc\", display_order : \"Ascending\", isloaded : false});}}>\n                      Ascending\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => {this.setState({ order : \"desc\", display_order : \"Descending\", isloaded : false});}}>\n                      Descending\n                    </Dropdown.Item>\n                  </DropdownButton>\n              </Col>\n            </Row>\n          <br/>\n          <Container>\n            <center><h4 style={{color: '#1976d2'}}>Page {this.state.curent_page+1}/{this.state.total_pages}</h4></center>\n            <Row className=\"justify-content-md-center\">\n              <Pagination>\n                {/*First Page*/}\n                <Pagination.First\n                  onClick={e => this.setState({ curent_page : 0, isloaded : false})}\n                />\n\n                {/*Previous Page*/}\n                <Pagination.Prev\n                  disabled={this.state.page <= 0}\n                  onClick={e => this.setState({ curent_page : this.state.page -1 , isloaded : false})}\n                />\n\n                {/*Eveything in between - see block before return statement*/}\n                {inbetween}\n\n                {/*Next Page*/}\n                <Pagination.Next\n                  disabled={this.state.page >= this.state.total_pages - 1}\n                  onClick={e => this.setState({ curent_page : this.state.page +1 , isloaded : false})}\n                />\n\n                {/*Last Page*/}\n                <Pagination.Last\n                  onClick={e => this.setState({ curent_page : this.state.total_pages - 1 , isloaded : false})}\n                />\n              </Pagination>\n            </Row>\n           </Container>\n            <Container>\n              {/*Record Grid*/}\n              <Row className=\"justify-content-md-center\" className=\"spacing\">\n              {this.state.objects.map((pollutant) => (\n                 <Col className=\"spacing\" lg=\"4\" sm=\"6\" xs=\"12\">\n                 <Card body style={{ backgroundColor: '#00', borderColor: '#2255' }}>\n                   <CardImg src = {pollutant.chemspider_id}/>\n                   <CardHeader>\n                     {/* The dynamic link is arranged this way through the NavBar.js\n                     and back to the Location component*/}\n                     <h5><Link to={\"/Pollutant/\" + pollutant.chemical_name}>{pollutant.chemical_name}</Link></h5>\n                   </CardHeader>\n                   <CardBody>\n                   <CardText>\n                     <p>\n                     <b>Inhalation Cancer Potency</b>\n                     <br/>Potency: {pollutant.inhalation_cancer_potency} {pollutant.inhalation_cancer_potency_units}\n                     <br/>Source: {pollutant.inhalation_cancer_potency_source}\n                     <br/><b>Inhalation Reference Concentration</b>\n                     <br/>Concentration: {pollutant.inhalation_reference_concentration} {pollutant.inhalation_reference_concentration_units}\n                     <br/>Source: {pollutant.inhalation_reference_concentration_source}\n                     <br/><b>National Ambient Air Quality Standards</b>\n                     <br/>Standard: {pollutant.national_ambient_air_quality_std} {pollutant.national_ambient_air_quality_std_units}\n                     <br/>Source: {pollutant.national_ambient_air_quality_std_source}\n                     </p>\n\n                   </CardText>\n                   </CardBody>\n                </Card>\n                 <p />\n                 </Col>\n              ))}\n              </Row>\n         </Container>\n        </div>\n      );\n    } else {\n      this.componentDidMount();\n      return (\n        <div>\n         <center>omae wa mou shindeiru</center>\n        </div>\n      );\n   }\n  }\n}\n\nexport default createUltimatePagination({\n  WrapperComponent: Pagination,\n  itemTypeToComponent: {\n    [ITEM_TYPES.PAGE]: ({value, isActive, onClick}) => (\n      <Pagination.Item active={isActive} onClick={onClick}>{value}</Pagination.Item>\n    ),\n    [ITEM_TYPES.ELLIPSIS]: ({ isActive, onClick }) => (\n      <Pagination.Ellipsis disabled={isActive} onClick={onClick} />\n    ),\n    [ITEM_TYPES.FIRST_PAGE_LINK]: ({ isActive, onClick }) => (\n      <Pagination.First disabled={isActive} onClick={onClick} />\n    ),\n    [ITEM_TYPES.PREVIOUS_PAGE_LINK]: ({ isActive, onClick }) => (\n      <Pagination.Prev disabled={isActive} onClick={onClick} />\n    ),\n    [ITEM_TYPES.NEXT_PAGE_LINK]: ({ isActive, onClick }) => (\n      <Pagination.Next disabled={isActive} onClick={onClick} />\n    ),\n    [ITEM_TYPES.LAST_PAGE_LINK]: ({ isActive, onClick }) => (\n      <Pagination.Last disabled={isActive} onClick={onClick} />\n    ),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}